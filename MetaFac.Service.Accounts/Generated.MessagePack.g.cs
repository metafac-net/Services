#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: MessagePack.2.9
// Metadata : MetaFac.Service.Accounts.Schema
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace MetaFac.Service.Accounts
{


    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source) => CheckNotFrozen();
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }


    [Union(BaseRequest.EntityTag, typeof(BaseRequest))]
    [Union(GetServerInfoRequest.EntityTag, typeof(GetServerInfoRequest))]
    [Union(AccountRequest.EntityTag, typeof(AccountRequest))]
    [Union(GetNewAccountIdRequest.EntityTag, typeof(GetNewAccountIdRequest))]
    [Union(CreateAccountRequest.EntityTag, typeof(CreateAccountRequest))]
    [Union(VerifyAccountRequest.EntityTag, typeof(VerifyAccountRequest))]
    [Union(ModifyAccountRequest.EntityTag, typeof(ModifyAccountRequest))]
    [Union(GetSecretRequest.EntityTag, typeof(GetSecretRequest))]
    [Union(GetAdminTokenRequest.EntityTag, typeof(GetAdminTokenRequest))]
    [Union(AddSecretRequest.EntityTag, typeof(AddSecretRequest))]
    [Union(CommencePurchaseRequest.EntityTag, typeof(CommencePurchaseRequest))]
    [Union(CompletePurchaseRequest.EntityTag, typeof(CompletePurchaseRequest))]
    [Union(BaseResponse.EntityTag, typeof(BaseResponse))]
    [Union(GetServerInfoResponse.EntityTag, typeof(GetServerInfoResponse))]
    [Union(AccountResponse.EntityTag, typeof(AccountResponse))]
    [Union(GetNewAccountIdResponse.EntityTag, typeof(GetNewAccountIdResponse))]
    [Union(CreateAccountResponse.EntityTag, typeof(CreateAccountResponse))]
    [Union(VerifyAccountResponse.EntityTag, typeof(VerifyAccountResponse))]
    [Union(ModifyAccountResponse.EntityTag, typeof(ModifyAccountResponse))]
    [Union(GetSecretResponse.EntityTag, typeof(GetSecretResponse))]
    [Union(GetAdminTokenResponse.EntityTag, typeof(GetAdminTokenResponse))]
    [Union(AddSecretResponse.EntityTag, typeof(AddSecretResponse))]
    [Union(CommencePurchaseResponse.EntityTag, typeof(CommencePurchaseResponse))]
    [Union(CompletePurchaseResponse.EntityTag, typeof(CompletePurchaseResponse))]
    public abstract partial class BaseMessage
    {
    }
    public sealed class BaseMessage_Factory : IEntityFactory<IBaseMessage, BaseMessage>
    {
        private static readonly BaseMessage_Factory _instance = new BaseMessage_Factory();
        public static BaseMessage_Factory Instance => _instance;

        public BaseMessage? CreateFrom(IBaseMessage? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case BaseRequest.EntityTag: return BaseRequest_Factory.Instance.CreateFrom((IBaseRequest)source);
                case GetServerInfoRequest.EntityTag: return GetServerInfoRequest_Factory.Instance.CreateFrom((IGetServerInfoRequest)source);
                case AccountRequest.EntityTag: return AccountRequest_Factory.Instance.CreateFrom((IAccountRequest)source);
                case GetNewAccountIdRequest.EntityTag: return GetNewAccountIdRequest_Factory.Instance.CreateFrom((IGetNewAccountIdRequest)source);
                case CreateAccountRequest.EntityTag: return CreateAccountRequest_Factory.Instance.CreateFrom((ICreateAccountRequest)source);
                case VerifyAccountRequest.EntityTag: return VerifyAccountRequest_Factory.Instance.CreateFrom((IVerifyAccountRequest)source);
                case ModifyAccountRequest.EntityTag: return ModifyAccountRequest_Factory.Instance.CreateFrom((IModifyAccountRequest)source);
                case GetSecretRequest.EntityTag: return GetSecretRequest_Factory.Instance.CreateFrom((IGetSecretRequest)source);
                case GetAdminTokenRequest.EntityTag: return GetAdminTokenRequest_Factory.Instance.CreateFrom((IGetAdminTokenRequest)source);
                case AddSecretRequest.EntityTag: return AddSecretRequest_Factory.Instance.CreateFrom((IAddSecretRequest)source);
                case CommencePurchaseRequest.EntityTag: return CommencePurchaseRequest_Factory.Instance.CreateFrom((ICommencePurchaseRequest)source);
                case CompletePurchaseRequest.EntityTag: return CompletePurchaseRequest_Factory.Instance.CreateFrom((ICompletePurchaseRequest)source);
                case BaseResponse.EntityTag: return BaseResponse_Factory.Instance.CreateFrom((IBaseResponse)source);
                case GetServerInfoResponse.EntityTag: return GetServerInfoResponse_Factory.Instance.CreateFrom((IGetServerInfoResponse)source);
                case AccountResponse.EntityTag: return AccountResponse_Factory.Instance.CreateFrom((IAccountResponse)source);
                case GetNewAccountIdResponse.EntityTag: return GetNewAccountIdResponse_Factory.Instance.CreateFrom((IGetNewAccountIdResponse)source);
                case CreateAccountResponse.EntityTag: return CreateAccountResponse_Factory.Instance.CreateFrom((ICreateAccountResponse)source);
                case VerifyAccountResponse.EntityTag: return VerifyAccountResponse_Factory.Instance.CreateFrom((IVerifyAccountResponse)source);
                case ModifyAccountResponse.EntityTag: return ModifyAccountResponse_Factory.Instance.CreateFrom((IModifyAccountResponse)source);
                case GetSecretResponse.EntityTag: return GetSecretResponse_Factory.Instance.CreateFrom((IGetSecretResponse)source);
                case GetAdminTokenResponse.EntityTag: return GetAdminTokenResponse_Factory.Instance.CreateFrom((IGetAdminTokenResponse)source);
                case AddSecretResponse.EntityTag: return AddSecretResponse_Factory.Instance.CreateFrom((IAddSecretResponse)source);
                case CommencePurchaseResponse.EntityTag: return CommencePurchaseResponse_Factory.Instance.CreateFrom((ICommencePurchaseResponse)source);
                case CompletePurchaseResponse.EntityTag: return CompletePurchaseResponse_Factory.Instance.CreateFrom((ICompletePurchaseResponse)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseMessage)} from {source.GetType().Name}");
            }
        }

        public BaseMessage Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseMessage)}");
    }
    [MessagePackObject]
    public partial class BaseMessage : EntityBase, IBaseMessage, IEquatable<BaseMessage>, ICopyFrom<BaseMessage>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private GuidValue field_RequestId;

        // ---------- accessors ----------
        [Key(1)]
        public GuidValue RequestId
        {
            get => field_RequestId;
            set => field_RequestId = CheckNotFrozen(ref value);
        }

        // ---------- IBaseMessage methods ----------
        Guid IBaseMessage.RequestId => field_RequestId.ToExternal();

        public BaseMessage()
        {
        }

        public BaseMessage(BaseMessage source) : base(source)
        {
            field_RequestId = source.field_RequestId;
        }

        public void CopyFrom(BaseMessage source)
        {
            base.CopyFrom(source);
            field_RequestId = source.field_RequestId;
        }

        public BaseMessage(IBaseMessage source) : base(source)
        {
            field_RequestId = source.RequestId.ToInternal();
        }

        public bool Equals(BaseMessage? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_RequestId.ValueEquals(other.field_RequestId)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(BaseMessage left, BaseMessage right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseMessage left, BaseMessage right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseMessage other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_RequestId.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetServerInfoRequest.EntityTag, typeof(GetServerInfoRequest))]
    [Union(AccountRequest.EntityTag, typeof(AccountRequest))]
    [Union(GetNewAccountIdRequest.EntityTag, typeof(GetNewAccountIdRequest))]
    [Union(CreateAccountRequest.EntityTag, typeof(CreateAccountRequest))]
    [Union(VerifyAccountRequest.EntityTag, typeof(VerifyAccountRequest))]
    [Union(ModifyAccountRequest.EntityTag, typeof(ModifyAccountRequest))]
    [Union(GetSecretRequest.EntityTag, typeof(GetSecretRequest))]
    [Union(GetAdminTokenRequest.EntityTag, typeof(GetAdminTokenRequest))]
    [Union(AddSecretRequest.EntityTag, typeof(AddSecretRequest))]
    [Union(CommencePurchaseRequest.EntityTag, typeof(CommencePurchaseRequest))]
    [Union(CompletePurchaseRequest.EntityTag, typeof(CompletePurchaseRequest))]
    public abstract partial class BaseRequest
    {
    }
    public sealed class BaseRequest_Factory : IEntityFactory<IBaseRequest, BaseRequest>
    {
        private static readonly BaseRequest_Factory _instance = new BaseRequest_Factory();
        public static BaseRequest_Factory Instance => _instance;

        public BaseRequest? CreateFrom(IBaseRequest? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetServerInfoRequest.EntityTag: return GetServerInfoRequest_Factory.Instance.CreateFrom((IGetServerInfoRequest)source);
                case AccountRequest.EntityTag: return AccountRequest_Factory.Instance.CreateFrom((IAccountRequest)source);
                case GetNewAccountIdRequest.EntityTag: return GetNewAccountIdRequest_Factory.Instance.CreateFrom((IGetNewAccountIdRequest)source);
                case CreateAccountRequest.EntityTag: return CreateAccountRequest_Factory.Instance.CreateFrom((ICreateAccountRequest)source);
                case VerifyAccountRequest.EntityTag: return VerifyAccountRequest_Factory.Instance.CreateFrom((IVerifyAccountRequest)source);
                case ModifyAccountRequest.EntityTag: return ModifyAccountRequest_Factory.Instance.CreateFrom((IModifyAccountRequest)source);
                case GetSecretRequest.EntityTag: return GetSecretRequest_Factory.Instance.CreateFrom((IGetSecretRequest)source);
                case GetAdminTokenRequest.EntityTag: return GetAdminTokenRequest_Factory.Instance.CreateFrom((IGetAdminTokenRequest)source);
                case AddSecretRequest.EntityTag: return AddSecretRequest_Factory.Instance.CreateFrom((IAddSecretRequest)source);
                case CommencePurchaseRequest.EntityTag: return CommencePurchaseRequest_Factory.Instance.CreateFrom((ICommencePurchaseRequest)source);
                case CompletePurchaseRequest.EntityTag: return CompletePurchaseRequest_Factory.Instance.CreateFrom((ICompletePurchaseRequest)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseRequest)} from {source.GetType().Name}");
            }
        }

        public BaseRequest Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseRequest)}");
    }
    [MessagePackObject]
    public partial class BaseRequest : BaseMessage, IBaseRequest, IEquatable<BaseRequest>, ICopyFrom<BaseRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IBaseRequest methods ----------

        public BaseRequest()
        {
        }

        public BaseRequest(BaseRequest source) : base(source)
        {
        }

        public void CopyFrom(BaseRequest source)
        {
            base.CopyFrom(source);
        }

        public BaseRequest(IBaseRequest source) : base(source)
        {
        }

        public bool Equals(BaseRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(BaseRequest left, BaseRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseRequest left, BaseRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetServerInfoResponse.EntityTag, typeof(GetServerInfoResponse))]
    [Union(AccountResponse.EntityTag, typeof(AccountResponse))]
    [Union(GetNewAccountIdResponse.EntityTag, typeof(GetNewAccountIdResponse))]
    [Union(CreateAccountResponse.EntityTag, typeof(CreateAccountResponse))]
    [Union(VerifyAccountResponse.EntityTag, typeof(VerifyAccountResponse))]
    [Union(ModifyAccountResponse.EntityTag, typeof(ModifyAccountResponse))]
    [Union(GetSecretResponse.EntityTag, typeof(GetSecretResponse))]
    [Union(GetAdminTokenResponse.EntityTag, typeof(GetAdminTokenResponse))]
    [Union(AddSecretResponse.EntityTag, typeof(AddSecretResponse))]
    [Union(CommencePurchaseResponse.EntityTag, typeof(CommencePurchaseResponse))]
    [Union(CompletePurchaseResponse.EntityTag, typeof(CompletePurchaseResponse))]
    public abstract partial class BaseResponse
    {
    }
    public sealed class BaseResponse_Factory : IEntityFactory<IBaseResponse, BaseResponse>
    {
        private static readonly BaseResponse_Factory _instance = new BaseResponse_Factory();
        public static BaseResponse_Factory Instance => _instance;

        public BaseResponse? CreateFrom(IBaseResponse? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetServerInfoResponse.EntityTag: return GetServerInfoResponse_Factory.Instance.CreateFrom((IGetServerInfoResponse)source);
                case AccountResponse.EntityTag: return AccountResponse_Factory.Instance.CreateFrom((IAccountResponse)source);
                case GetNewAccountIdResponse.EntityTag: return GetNewAccountIdResponse_Factory.Instance.CreateFrom((IGetNewAccountIdResponse)source);
                case CreateAccountResponse.EntityTag: return CreateAccountResponse_Factory.Instance.CreateFrom((ICreateAccountResponse)source);
                case VerifyAccountResponse.EntityTag: return VerifyAccountResponse_Factory.Instance.CreateFrom((IVerifyAccountResponse)source);
                case ModifyAccountResponse.EntityTag: return ModifyAccountResponse_Factory.Instance.CreateFrom((IModifyAccountResponse)source);
                case GetSecretResponse.EntityTag: return GetSecretResponse_Factory.Instance.CreateFrom((IGetSecretResponse)source);
                case GetAdminTokenResponse.EntityTag: return GetAdminTokenResponse_Factory.Instance.CreateFrom((IGetAdminTokenResponse)source);
                case AddSecretResponse.EntityTag: return AddSecretResponse_Factory.Instance.CreateFrom((IAddSecretResponse)source);
                case CommencePurchaseResponse.EntityTag: return CommencePurchaseResponse_Factory.Instance.CreateFrom((ICommencePurchaseResponse)source);
                case CompletePurchaseResponse.EntityTag: return CompletePurchaseResponse_Factory.Instance.CreateFrom((ICompletePurchaseResponse)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseResponse)} from {source.GetType().Name}");
            }
        }

        public BaseResponse Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseResponse)}");
    }
    [MessagePackObject]
    public partial class BaseResponse : BaseMessage, IBaseResponse, IEquatable<BaseResponse>, ICopyFrom<BaseResponse>
    {
        protected override void OnFreeze()
        {
            if (field_Messages is not null)
            {
                foreach (var element in field_Messages)
                {
                    element?.Freeze();
                }
            }
            base.OnFreeze();
        }

        public new const int EntityTag = 3;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private Boolean field_Succeeded;
        private String? field_FailReason;
        private ImmutableList<LogMessage?>? field_Messages;

        // ---------- accessors ----------
        [Key(2)]
        public Boolean Succeeded
        {
            get => field_Succeeded;
            set => field_Succeeded = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public String? FailReason
        {
            get => field_FailReason;
            set => field_FailReason = CheckNotFrozen(ref value);
        }
        [Key(4)]
        public ImmutableList<LogMessage?>? Messages
        {
            get => field_Messages;
            set => field_Messages = CheckNotFrozen(ref value);
        }

        // ---------- IBaseResponse methods ----------
        Boolean IBaseResponse.Succeeded => field_Succeeded.ToExternal();
        String? IBaseResponse.FailReason => field_FailReason;
        IReadOnlyList<ILogMessage?>? IBaseResponse.Messages => field_Messages;

        public BaseResponse()
        {
        }

        public BaseResponse(BaseResponse source) : base(source)
        {
            field_Succeeded = source.field_Succeeded;
            field_FailReason = source.field_FailReason;
            field_Messages = source.field_Messages;
        }

        public void CopyFrom(BaseResponse source)
        {
            base.CopyFrom(source);
            field_Succeeded = source.field_Succeeded;
            field_FailReason = source.field_FailReason;
            field_Messages = source.field_Messages;
        }

        public BaseResponse(IBaseResponse source) : base(source)
        {
            field_Succeeded = source.Succeeded.ToInternal();
            field_FailReason = source.FailReason;
            field_Messages = source.Messages is null
                ? null
                : ImmutableList<LogMessage?>.Empty.AddRange(source.Messages.Select(x => LogMessage_Factory.Instance.CreateFrom(x)));
        }

        public bool Equals(BaseResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Succeeded.ValueEquals(other.field_Succeeded)) return false;
            if (!field_FailReason.ValueEquals(other.field_FailReason)) return false;
            if (!field_Messages.ArrayEquals(other.field_Messages)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(BaseResponse left, BaseResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseResponse left, BaseResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Succeeded.CalcHashUnary());
            hc.Add(field_FailReason.CalcHashUnary());
            hc.Add(field_Messages.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class LogMessage_Factory : IEntityFactory<ILogMessage, LogMessage>
    {
        private static readonly LogMessage_Factory _instance = new LogMessage_Factory();
        public static LogMessage_Factory Instance => _instance;

        public LogMessage? CreateFrom(ILogMessage? source)
        {
            if (source is null) return null;
            if (source is LogMessage sibling && sibling.IsFrozen()) return sibling;
            return new LogMessage(source);
        }

        private static readonly LogMessage _empty = new LogMessage().Frozen();
        public LogMessage Empty => _empty;
    }
    [MessagePackObject]
    public partial class LogMessage : EntityBase, ILogMessage, IEquatable<LogMessage>, ICopyFrom<LogMessage>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 4;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private Int32 field_Severity;
        private String? field_MessageTemplate;
        private ImmutableList<String?>? field_MessageParameters;

        // ---------- accessors ----------
        [Key(1)]
        public Int32 Severity
        {
            get => field_Severity;
            set => field_Severity = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? MessageTemplate
        {
            get => field_MessageTemplate;
            set => field_MessageTemplate = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public ImmutableList<String?>? MessageParameters
        {
            get => field_MessageParameters;
            set => field_MessageParameters = CheckNotFrozen(ref value);
        }

        // ---------- ILogMessage methods ----------
        Int32 ILogMessage.Severity => field_Severity.ToExternal();
        String? ILogMessage.MessageTemplate => field_MessageTemplate;
        IReadOnlyList<String?>? ILogMessage.MessageParameters => field_MessageParameters;

        public LogMessage()
        {
        }

        public LogMessage(LogMessage source) : base(source)
        {
            field_Severity = source.field_Severity;
            field_MessageTemplate = source.field_MessageTemplate;
            field_MessageParameters = source.field_MessageParameters;
        }

        public void CopyFrom(LogMessage source)
        {
            base.CopyFrom(source);
            field_Severity = source.field_Severity;
            field_MessageTemplate = source.field_MessageTemplate;
            field_MessageParameters = source.field_MessageParameters;
        }

        public LogMessage(ILogMessage source) : base(source)
        {
            field_Severity = source.Severity.ToInternal();
            field_MessageTemplate = source.MessageTemplate;
            field_MessageParameters = source.MessageParameters is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.MessageParameters);
        }

        public bool Equals(LogMessage? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Severity.ValueEquals(other.field_Severity)) return false;
            if (!field_MessageTemplate.ValueEquals(other.field_MessageTemplate)) return false;
            if (!field_MessageParameters.ArrayEquals(other.field_MessageParameters)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(LogMessage left, LogMessage right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(LogMessage left, LogMessage right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is LogMessage other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Severity.CalcHashUnary());
            hc.Add(field_MessageTemplate.CalcHashUnary());
            hc.Add(field_MessageParameters.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class NameValuePair_Factory : IEntityFactory<INameValuePair, NameValuePair>
    {
        private static readonly NameValuePair_Factory _instance = new NameValuePair_Factory();
        public static NameValuePair_Factory Instance => _instance;

        public NameValuePair? CreateFrom(INameValuePair? source)
        {
            if (source is null) return null;
            if (source is NameValuePair sibling && sibling.IsFrozen()) return sibling;
            return new NameValuePair(source);
        }

        private static readonly NameValuePair _empty = new NameValuePair().Frozen();
        public NameValuePair Empty => _empty;
    }
    [MessagePackObject]
    public partial class NameValuePair : EntityBase, INameValuePair, IEquatable<NameValuePair>, ICopyFrom<NameValuePair>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 5;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_Name;
        private String? field_Value;

        // ---------- accessors ----------
        [Key(1)]
        public String? Name
        {
            get => field_Name;
            set => field_Name = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? Value
        {
            get => field_Value;
            set => field_Value = CheckNotFrozen(ref value);
        }

        // ---------- INameValuePair methods ----------
        String? INameValuePair.Name => field_Name;
        String? INameValuePair.Value => field_Value;

        public NameValuePair()
        {
        }

        public NameValuePair(NameValuePair source) : base(source)
        {
            field_Name = source.field_Name;
            field_Value = source.field_Value;
        }

        public void CopyFrom(NameValuePair source)
        {
            base.CopyFrom(source);
            field_Name = source.field_Name;
            field_Value = source.field_Value;
        }

        public NameValuePair(INameValuePair source) : base(source)
        {
            field_Name = source.Name;
            field_Value = source.Value;
        }

        public bool Equals(NameValuePair? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Name.ValueEquals(other.field_Name)) return false;
            if (!field_Value.ValueEquals(other.field_Value)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(NameValuePair left, NameValuePair right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(NameValuePair left, NameValuePair right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is NameValuePair other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Name.CalcHashUnary());
            hc.Add(field_Value.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetServerInfoRequest_Factory : IEntityFactory<IGetServerInfoRequest, GetServerInfoRequest>
    {
        private static readonly GetServerInfoRequest_Factory _instance = new GetServerInfoRequest_Factory();
        public static GetServerInfoRequest_Factory Instance => _instance;

        public GetServerInfoRequest? CreateFrom(IGetServerInfoRequest? source)
        {
            if (source is null) return null;
            if (source is GetServerInfoRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetServerInfoRequest(source);
        }

        private static readonly GetServerInfoRequest _empty = new GetServerInfoRequest().Frozen();
        public GetServerInfoRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetServerInfoRequest : BaseRequest, IGetServerInfoRequest, IEquatable<GetServerInfoRequest>, ICopyFrom<GetServerInfoRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 11;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IGetServerInfoRequest methods ----------

        public GetServerInfoRequest()
        {
        }

        public GetServerInfoRequest(GetServerInfoRequest source) : base(source)
        {
        }

        public void CopyFrom(GetServerInfoRequest source)
        {
            base.CopyFrom(source);
        }

        public GetServerInfoRequest(IGetServerInfoRequest source) : base(source)
        {
        }

        public bool Equals(GetServerInfoRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(GetServerInfoRequest left, GetServerInfoRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetServerInfoRequest left, GetServerInfoRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetServerInfoRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetServerInfoResponse_Factory : IEntityFactory<IGetServerInfoResponse, GetServerInfoResponse>
    {
        private static readonly GetServerInfoResponse_Factory _instance = new GetServerInfoResponse_Factory();
        public static GetServerInfoResponse_Factory Instance => _instance;

        public GetServerInfoResponse? CreateFrom(IGetServerInfoResponse? source)
        {
            if (source is null) return null;
            if (source is GetServerInfoResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetServerInfoResponse(source);
        }

        private static readonly GetServerInfoResponse _empty = new GetServerInfoResponse().Frozen();
        public GetServerInfoResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetServerInfoResponse : BaseResponse, IGetServerInfoResponse, IEquatable<GetServerInfoResponse>, ICopyFrom<GetServerInfoResponse>
    {
        protected override void OnFreeze()
        {
            if (field_ServerProperties is not null)
            {
                foreach (var element in field_ServerProperties)
                {
                    element?.Freeze();
                }
            }
            base.OnFreeze();
        }

        public new const int EntityTag = 12;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableList<NameValuePair?>? field_ServerProperties;

        // ---------- accessors ----------
        [Key(12)]
        public ImmutableList<NameValuePair?>? ServerProperties
        {
            get => field_ServerProperties;
            set => field_ServerProperties = CheckNotFrozen(ref value);
        }

        // ---------- IGetServerInfoResponse methods ----------
        IReadOnlyList<INameValuePair?>? IGetServerInfoResponse.ServerProperties => field_ServerProperties;

        public GetServerInfoResponse()
        {
        }

        public GetServerInfoResponse(GetServerInfoResponse source) : base(source)
        {
            field_ServerProperties = source.field_ServerProperties;
        }

        public void CopyFrom(GetServerInfoResponse source)
        {
            base.CopyFrom(source);
            field_ServerProperties = source.field_ServerProperties;
        }

        public GetServerInfoResponse(IGetServerInfoResponse source) : base(source)
        {
            field_ServerProperties = source.ServerProperties is null
                ? null
                : ImmutableList<NameValuePair?>.Empty.AddRange(source.ServerProperties.Select(x => NameValuePair_Factory.Instance.CreateFrom(x)));
        }

        public bool Equals(GetServerInfoResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_ServerProperties.ArrayEquals(other.field_ServerProperties)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetServerInfoResponse left, GetServerInfoResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetServerInfoResponse left, GetServerInfoResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetServerInfoResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_ServerProperties.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetNewAccountIdRequest.EntityTag, typeof(GetNewAccountIdRequest))]
    [Union(CreateAccountRequest.EntityTag, typeof(CreateAccountRequest))]
    [Union(VerifyAccountRequest.EntityTag, typeof(VerifyAccountRequest))]
    [Union(ModifyAccountRequest.EntityTag, typeof(ModifyAccountRequest))]
    [Union(GetSecretRequest.EntityTag, typeof(GetSecretRequest))]
    [Union(GetAdminTokenRequest.EntityTag, typeof(GetAdminTokenRequest))]
    [Union(AddSecretRequest.EntityTag, typeof(AddSecretRequest))]
    [Union(CommencePurchaseRequest.EntityTag, typeof(CommencePurchaseRequest))]
    [Union(CompletePurchaseRequest.EntityTag, typeof(CompletePurchaseRequest))]
    public abstract partial class AccountRequest
    {
    }
    public sealed class AccountRequest_Factory : IEntityFactory<IAccountRequest, AccountRequest>
    {
        private static readonly AccountRequest_Factory _instance = new AccountRequest_Factory();
        public static AccountRequest_Factory Instance => _instance;

        public AccountRequest? CreateFrom(IAccountRequest? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetNewAccountIdRequest.EntityTag: return GetNewAccountIdRequest_Factory.Instance.CreateFrom((IGetNewAccountIdRequest)source);
                case CreateAccountRequest.EntityTag: return CreateAccountRequest_Factory.Instance.CreateFrom((ICreateAccountRequest)source);
                case VerifyAccountRequest.EntityTag: return VerifyAccountRequest_Factory.Instance.CreateFrom((IVerifyAccountRequest)source);
                case ModifyAccountRequest.EntityTag: return ModifyAccountRequest_Factory.Instance.CreateFrom((IModifyAccountRequest)source);
                case GetSecretRequest.EntityTag: return GetSecretRequest_Factory.Instance.CreateFrom((IGetSecretRequest)source);
                case GetAdminTokenRequest.EntityTag: return GetAdminTokenRequest_Factory.Instance.CreateFrom((IGetAdminTokenRequest)source);
                case AddSecretRequest.EntityTag: return AddSecretRequest_Factory.Instance.CreateFrom((IAddSecretRequest)source);
                case CommencePurchaseRequest.EntityTag: return CommencePurchaseRequest_Factory.Instance.CreateFrom((ICommencePurchaseRequest)source);
                case CompletePurchaseRequest.EntityTag: return CompletePurchaseRequest_Factory.Instance.CreateFrom((ICompletePurchaseRequest)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(AccountRequest)} from {source.GetType().Name}");
            }
        }

        public AccountRequest Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(AccountRequest)}");
    }
    [MessagePackObject]
    public partial class AccountRequest : BaseRequest, IAccountRequest, IEquatable<AccountRequest>, ICopyFrom<AccountRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 21;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IAccountRequest methods ----------

        public AccountRequest()
        {
        }

        public AccountRequest(AccountRequest source) : base(source)
        {
        }

        public void CopyFrom(AccountRequest source)
        {
            base.CopyFrom(source);
        }

        public AccountRequest(IAccountRequest source) : base(source)
        {
        }

        public bool Equals(AccountRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(AccountRequest left, AccountRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(AccountRequest left, AccountRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is AccountRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetNewAccountIdResponse.EntityTag, typeof(GetNewAccountIdResponse))]
    [Union(CreateAccountResponse.EntityTag, typeof(CreateAccountResponse))]
    [Union(VerifyAccountResponse.EntityTag, typeof(VerifyAccountResponse))]
    [Union(ModifyAccountResponse.EntityTag, typeof(ModifyAccountResponse))]
    [Union(GetSecretResponse.EntityTag, typeof(GetSecretResponse))]
    [Union(GetAdminTokenResponse.EntityTag, typeof(GetAdminTokenResponse))]
    [Union(AddSecretResponse.EntityTag, typeof(AddSecretResponse))]
    [Union(CommencePurchaseResponse.EntityTag, typeof(CommencePurchaseResponse))]
    [Union(CompletePurchaseResponse.EntityTag, typeof(CompletePurchaseResponse))]
    public abstract partial class AccountResponse
    {
    }
    public sealed class AccountResponse_Factory : IEntityFactory<IAccountResponse, AccountResponse>
    {
        private static readonly AccountResponse_Factory _instance = new AccountResponse_Factory();
        public static AccountResponse_Factory Instance => _instance;

        public AccountResponse? CreateFrom(IAccountResponse? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetNewAccountIdResponse.EntityTag: return GetNewAccountIdResponse_Factory.Instance.CreateFrom((IGetNewAccountIdResponse)source);
                case CreateAccountResponse.EntityTag: return CreateAccountResponse_Factory.Instance.CreateFrom((ICreateAccountResponse)source);
                case VerifyAccountResponse.EntityTag: return VerifyAccountResponse_Factory.Instance.CreateFrom((IVerifyAccountResponse)source);
                case ModifyAccountResponse.EntityTag: return ModifyAccountResponse_Factory.Instance.CreateFrom((IModifyAccountResponse)source);
                case GetSecretResponse.EntityTag: return GetSecretResponse_Factory.Instance.CreateFrom((IGetSecretResponse)source);
                case GetAdminTokenResponse.EntityTag: return GetAdminTokenResponse_Factory.Instance.CreateFrom((IGetAdminTokenResponse)source);
                case AddSecretResponse.EntityTag: return AddSecretResponse_Factory.Instance.CreateFrom((IAddSecretResponse)source);
                case CommencePurchaseResponse.EntityTag: return CommencePurchaseResponse_Factory.Instance.CreateFrom((ICommencePurchaseResponse)source);
                case CompletePurchaseResponse.EntityTag: return CompletePurchaseResponse_Factory.Instance.CreateFrom((ICompletePurchaseResponse)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(AccountResponse)} from {source.GetType().Name}");
            }
        }

        public AccountResponse Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(AccountResponse)}");
    }
    [MessagePackObject]
    public partial class AccountResponse : BaseResponse, IAccountResponse, IEquatable<AccountResponse>, ICopyFrom<AccountResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 22;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IAccountResponse methods ----------

        public AccountResponse()
        {
        }

        public AccountResponse(AccountResponse source) : base(source)
        {
        }

        public void CopyFrom(AccountResponse source)
        {
            base.CopyFrom(source);
        }

        public AccountResponse(IAccountResponse source) : base(source)
        {
        }

        public bool Equals(AccountResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(AccountResponse left, AccountResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(AccountResponse left, AccountResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is AccountResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetNewAccountIdRequest_Factory : IEntityFactory<IGetNewAccountIdRequest, GetNewAccountIdRequest>
    {
        private static readonly GetNewAccountIdRequest_Factory _instance = new GetNewAccountIdRequest_Factory();
        public static GetNewAccountIdRequest_Factory Instance => _instance;

        public GetNewAccountIdRequest? CreateFrom(IGetNewAccountIdRequest? source)
        {
            if (source is null) return null;
            if (source is GetNewAccountIdRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetNewAccountIdRequest(source);
        }

        private static readonly GetNewAccountIdRequest _empty = new GetNewAccountIdRequest().Frozen();
        public GetNewAccountIdRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetNewAccountIdRequest : AccountRequest, IGetNewAccountIdRequest, IEquatable<GetNewAccountIdRequest>, ICopyFrom<GetNewAccountIdRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 23;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IGetNewAccountIdRequest methods ----------

        public GetNewAccountIdRequest()
        {
        }

        public GetNewAccountIdRequest(GetNewAccountIdRequest source) : base(source)
        {
        }

        public void CopyFrom(GetNewAccountIdRequest source)
        {
            base.CopyFrom(source);
        }

        public GetNewAccountIdRequest(IGetNewAccountIdRequest source) : base(source)
        {
        }

        public bool Equals(GetNewAccountIdRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(GetNewAccountIdRequest left, GetNewAccountIdRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetNewAccountIdRequest left, GetNewAccountIdRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetNewAccountIdRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetNewAccountIdResponse_Factory : IEntityFactory<IGetNewAccountIdResponse, GetNewAccountIdResponse>
    {
        private static readonly GetNewAccountIdResponse_Factory _instance = new GetNewAccountIdResponse_Factory();
        public static GetNewAccountIdResponse_Factory Instance => _instance;

        public GetNewAccountIdResponse? CreateFrom(IGetNewAccountIdResponse? source)
        {
            if (source is null) return null;
            if (source is GetNewAccountIdResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetNewAccountIdResponse(source);
        }

        private static readonly GetNewAccountIdResponse _empty = new GetNewAccountIdResponse().Frozen();
        public GetNewAccountIdResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetNewAccountIdResponse : AccountResponse, IGetNewAccountIdResponse, IEquatable<GetNewAccountIdResponse>, ICopyFrom<GetNewAccountIdResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 24;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_CreateToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? CreateToken
        {
            get => field_CreateToken;
            set => field_CreateToken = CheckNotFrozen(ref value);
        }

        // ---------- IGetNewAccountIdResponse methods ----------
        String? IGetNewAccountIdResponse.CreateToken => field_CreateToken;

        public GetNewAccountIdResponse()
        {
        }

        public GetNewAccountIdResponse(GetNewAccountIdResponse source) : base(source)
        {
            field_CreateToken = source.field_CreateToken;
        }

        public void CopyFrom(GetNewAccountIdResponse source)
        {
            base.CopyFrom(source);
            field_CreateToken = source.field_CreateToken;
        }

        public GetNewAccountIdResponse(IGetNewAccountIdResponse source) : base(source)
        {
            field_CreateToken = source.CreateToken;
        }

        public bool Equals(GetNewAccountIdResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_CreateToken.ValueEquals(other.field_CreateToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetNewAccountIdResponse left, GetNewAccountIdResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetNewAccountIdResponse left, GetNewAccountIdResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetNewAccountIdResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_CreateToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CreateAccountRequest_Factory : IEntityFactory<ICreateAccountRequest, CreateAccountRequest>
    {
        private static readonly CreateAccountRequest_Factory _instance = new CreateAccountRequest_Factory();
        public static CreateAccountRequest_Factory Instance => _instance;

        public CreateAccountRequest? CreateFrom(ICreateAccountRequest? source)
        {
            if (source is null) return null;
            if (source is CreateAccountRequest sibling && sibling.IsFrozen()) return sibling;
            return new CreateAccountRequest(source);
        }

        private static readonly CreateAccountRequest _empty = new CreateAccountRequest().Frozen();
        public CreateAccountRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class CreateAccountRequest : AccountRequest, ICreateAccountRequest, IEquatable<CreateAccountRequest>, ICopyFrom<CreateAccountRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 25;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_CreateToken;
        private String? field_ShortName;
        private String? field_PrimaryEmailAddress;
        private String? field_BackupEmailAddress;

        // ---------- accessors ----------
        [Key(21)]
        public String? CreateToken
        {
            get => field_CreateToken;
            set => field_CreateToken = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public String? ShortName
        {
            get => field_ShortName;
            set => field_ShortName = CheckNotFrozen(ref value);
        }
        [Key(23)]
        public String? PrimaryEmailAddress
        {
            get => field_PrimaryEmailAddress;
            set => field_PrimaryEmailAddress = CheckNotFrozen(ref value);
        }
        [Key(24)]
        public String? BackupEmailAddress
        {
            get => field_BackupEmailAddress;
            set => field_BackupEmailAddress = CheckNotFrozen(ref value);
        }

        // ---------- ICreateAccountRequest methods ----------
        String? ICreateAccountRequest.CreateToken => field_CreateToken;
        String? ICreateAccountRequest.ShortName => field_ShortName;
        String? ICreateAccountRequest.PrimaryEmailAddress => field_PrimaryEmailAddress;
        String? ICreateAccountRequest.BackupEmailAddress => field_BackupEmailAddress;

        public CreateAccountRequest()
        {
        }

        public CreateAccountRequest(CreateAccountRequest source) : base(source)
        {
            field_CreateToken = source.field_CreateToken;
            field_ShortName = source.field_ShortName;
            field_PrimaryEmailAddress = source.field_PrimaryEmailAddress;
            field_BackupEmailAddress = source.field_BackupEmailAddress;
        }

        public void CopyFrom(CreateAccountRequest source)
        {
            base.CopyFrom(source);
            field_CreateToken = source.field_CreateToken;
            field_ShortName = source.field_ShortName;
            field_PrimaryEmailAddress = source.field_PrimaryEmailAddress;
            field_BackupEmailAddress = source.field_BackupEmailAddress;
        }

        public CreateAccountRequest(ICreateAccountRequest source) : base(source)
        {
            field_CreateToken = source.CreateToken;
            field_ShortName = source.ShortName;
            field_PrimaryEmailAddress = source.PrimaryEmailAddress;
            field_BackupEmailAddress = source.BackupEmailAddress;
        }

        public bool Equals(CreateAccountRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_CreateToken.ValueEquals(other.field_CreateToken)) return false;
            if (!field_ShortName.ValueEquals(other.field_ShortName)) return false;
            if (!field_PrimaryEmailAddress.ValueEquals(other.field_PrimaryEmailAddress)) return false;
            if (!field_BackupEmailAddress.ValueEquals(other.field_BackupEmailAddress)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CreateAccountRequest left, CreateAccountRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CreateAccountRequest left, CreateAccountRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CreateAccountRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_CreateToken.CalcHashUnary());
            hc.Add(field_ShortName.CalcHashUnary());
            hc.Add(field_PrimaryEmailAddress.CalcHashUnary());
            hc.Add(field_BackupEmailAddress.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CreateAccountResponse_Factory : IEntityFactory<ICreateAccountResponse, CreateAccountResponse>
    {
        private static readonly CreateAccountResponse_Factory _instance = new CreateAccountResponse_Factory();
        public static CreateAccountResponse_Factory Instance => _instance;

        public CreateAccountResponse? CreateFrom(ICreateAccountResponse? source)
        {
            if (source is null) return null;
            if (source is CreateAccountResponse sibling && sibling.IsFrozen()) return sibling;
            return new CreateAccountResponse(source);
        }

        private static readonly CreateAccountResponse _empty = new CreateAccountResponse().Frozen();
        public CreateAccountResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class CreateAccountResponse : AccountResponse, ICreateAccountResponse, IEquatable<CreateAccountResponse>, ICopyFrom<CreateAccountResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 26;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_VerifyToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? VerifyToken
        {
            get => field_VerifyToken;
            set => field_VerifyToken = CheckNotFrozen(ref value);
        }

        // ---------- ICreateAccountResponse methods ----------
        String? ICreateAccountResponse.VerifyToken => field_VerifyToken;

        public CreateAccountResponse()
        {
        }

        public CreateAccountResponse(CreateAccountResponse source) : base(source)
        {
            field_VerifyToken = source.field_VerifyToken;
        }

        public void CopyFrom(CreateAccountResponse source)
        {
            base.CopyFrom(source);
            field_VerifyToken = source.field_VerifyToken;
        }

        public CreateAccountResponse(ICreateAccountResponse source) : base(source)
        {
            field_VerifyToken = source.VerifyToken;
        }

        public bool Equals(CreateAccountResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_VerifyToken.ValueEquals(other.field_VerifyToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CreateAccountResponse left, CreateAccountResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CreateAccountResponse left, CreateAccountResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CreateAccountResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_VerifyToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class VerifyAccountRequest_Factory : IEntityFactory<IVerifyAccountRequest, VerifyAccountRequest>
    {
        private static readonly VerifyAccountRequest_Factory _instance = new VerifyAccountRequest_Factory();
        public static VerifyAccountRequest_Factory Instance => _instance;

        public VerifyAccountRequest? CreateFrom(IVerifyAccountRequest? source)
        {
            if (source is null) return null;
            if (source is VerifyAccountRequest sibling && sibling.IsFrozen()) return sibling;
            return new VerifyAccountRequest(source);
        }

        private static readonly VerifyAccountRequest _empty = new VerifyAccountRequest().Frozen();
        public VerifyAccountRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class VerifyAccountRequest : AccountRequest, IVerifyAccountRequest, IEquatable<VerifyAccountRequest>, ICopyFrom<VerifyAccountRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 27;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_VerifyToken;
        private String? field_PrimaryEmailVerifyCode;
        private String? field_BackupEmailVerifyCode;

        // ---------- accessors ----------
        [Key(21)]
        public String? VerifyToken
        {
            get => field_VerifyToken;
            set => field_VerifyToken = CheckNotFrozen(ref value);
        }
        [Key(25)]
        public String? PrimaryEmailVerifyCode
        {
            get => field_PrimaryEmailVerifyCode;
            set => field_PrimaryEmailVerifyCode = CheckNotFrozen(ref value);
        }
        [Key(26)]
        public String? BackupEmailVerifyCode
        {
            get => field_BackupEmailVerifyCode;
            set => field_BackupEmailVerifyCode = CheckNotFrozen(ref value);
        }

        // ---------- IVerifyAccountRequest methods ----------
        String? IVerifyAccountRequest.VerifyToken => field_VerifyToken;
        String? IVerifyAccountRequest.PrimaryEmailVerifyCode => field_PrimaryEmailVerifyCode;
        String? IVerifyAccountRequest.BackupEmailVerifyCode => field_BackupEmailVerifyCode;

        public VerifyAccountRequest()
        {
        }

        public VerifyAccountRequest(VerifyAccountRequest source) : base(source)
        {
            field_VerifyToken = source.field_VerifyToken;
            field_PrimaryEmailVerifyCode = source.field_PrimaryEmailVerifyCode;
            field_BackupEmailVerifyCode = source.field_BackupEmailVerifyCode;
        }

        public void CopyFrom(VerifyAccountRequest source)
        {
            base.CopyFrom(source);
            field_VerifyToken = source.field_VerifyToken;
            field_PrimaryEmailVerifyCode = source.field_PrimaryEmailVerifyCode;
            field_BackupEmailVerifyCode = source.field_BackupEmailVerifyCode;
        }

        public VerifyAccountRequest(IVerifyAccountRequest source) : base(source)
        {
            field_VerifyToken = source.VerifyToken;
            field_PrimaryEmailVerifyCode = source.PrimaryEmailVerifyCode;
            field_BackupEmailVerifyCode = source.BackupEmailVerifyCode;
        }

        public bool Equals(VerifyAccountRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_VerifyToken.ValueEquals(other.field_VerifyToken)) return false;
            if (!field_PrimaryEmailVerifyCode.ValueEquals(other.field_PrimaryEmailVerifyCode)) return false;
            if (!field_BackupEmailVerifyCode.ValueEquals(other.field_BackupEmailVerifyCode)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(VerifyAccountRequest left, VerifyAccountRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(VerifyAccountRequest left, VerifyAccountRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is VerifyAccountRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_VerifyToken.CalcHashUnary());
            hc.Add(field_PrimaryEmailVerifyCode.CalcHashUnary());
            hc.Add(field_BackupEmailVerifyCode.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class VerifyAccountResponse_Factory : IEntityFactory<IVerifyAccountResponse, VerifyAccountResponse>
    {
        private static readonly VerifyAccountResponse_Factory _instance = new VerifyAccountResponse_Factory();
        public static VerifyAccountResponse_Factory Instance => _instance;

        public VerifyAccountResponse? CreateFrom(IVerifyAccountResponse? source)
        {
            if (source is null) return null;
            if (source is VerifyAccountResponse sibling && sibling.IsFrozen()) return sibling;
            return new VerifyAccountResponse(source);
        }

        private static readonly VerifyAccountResponse _empty = new VerifyAccountResponse().Frozen();
        public VerifyAccountResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class VerifyAccountResponse : AccountResponse, IVerifyAccountResponse, IEquatable<VerifyAccountResponse>, ICopyFrom<VerifyAccountResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 28;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AccessToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? AccessToken
        {
            get => field_AccessToken;
            set => field_AccessToken = CheckNotFrozen(ref value);
        }

        // ---------- IVerifyAccountResponse methods ----------
        String? IVerifyAccountResponse.AccessToken => field_AccessToken;

        public VerifyAccountResponse()
        {
        }

        public VerifyAccountResponse(VerifyAccountResponse source) : base(source)
        {
            field_AccessToken = source.field_AccessToken;
        }

        public void CopyFrom(VerifyAccountResponse source)
        {
            base.CopyFrom(source);
            field_AccessToken = source.field_AccessToken;
        }

        public VerifyAccountResponse(IVerifyAccountResponse source) : base(source)
        {
            field_AccessToken = source.AccessToken;
        }

        public bool Equals(VerifyAccountResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AccessToken.ValueEquals(other.field_AccessToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(VerifyAccountResponse left, VerifyAccountResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(VerifyAccountResponse left, VerifyAccountResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is VerifyAccountResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AccessToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class ModifyAccountRequest_Factory : IEntityFactory<IModifyAccountRequest, ModifyAccountRequest>
    {
        private static readonly ModifyAccountRequest_Factory _instance = new ModifyAccountRequest_Factory();
        public static ModifyAccountRequest_Factory Instance => _instance;

        public ModifyAccountRequest? CreateFrom(IModifyAccountRequest? source)
        {
            if (source is null) return null;
            if (source is ModifyAccountRequest sibling && sibling.IsFrozen()) return sibling;
            return new ModifyAccountRequest(source);
        }

        private static readonly ModifyAccountRequest _empty = new ModifyAccountRequest().Frozen();
        public ModifyAccountRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class ModifyAccountRequest : AccountRequest, IModifyAccountRequest, IEquatable<ModifyAccountRequest>, ICopyFrom<ModifyAccountRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 29;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AccessToken;
        private String? field_ShortName;
        private String? field_PrimaryEmailAddress;
        private String? field_BackupEmailAddress;

        // ---------- accessors ----------
        [Key(21)]
        public String? AccessToken
        {
            get => field_AccessToken;
            set => field_AccessToken = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public String? ShortName
        {
            get => field_ShortName;
            set => field_ShortName = CheckNotFrozen(ref value);
        }
        [Key(23)]
        public String? PrimaryEmailAddress
        {
            get => field_PrimaryEmailAddress;
            set => field_PrimaryEmailAddress = CheckNotFrozen(ref value);
        }
        [Key(24)]
        public String? BackupEmailAddress
        {
            get => field_BackupEmailAddress;
            set => field_BackupEmailAddress = CheckNotFrozen(ref value);
        }

        // ---------- IModifyAccountRequest methods ----------
        String? IModifyAccountRequest.AccessToken => field_AccessToken;
        String? IModifyAccountRequest.ShortName => field_ShortName;
        String? IModifyAccountRequest.PrimaryEmailAddress => field_PrimaryEmailAddress;
        String? IModifyAccountRequest.BackupEmailAddress => field_BackupEmailAddress;

        public ModifyAccountRequest()
        {
        }

        public ModifyAccountRequest(ModifyAccountRequest source) : base(source)
        {
            field_AccessToken = source.field_AccessToken;
            field_ShortName = source.field_ShortName;
            field_PrimaryEmailAddress = source.field_PrimaryEmailAddress;
            field_BackupEmailAddress = source.field_BackupEmailAddress;
        }

        public void CopyFrom(ModifyAccountRequest source)
        {
            base.CopyFrom(source);
            field_AccessToken = source.field_AccessToken;
            field_ShortName = source.field_ShortName;
            field_PrimaryEmailAddress = source.field_PrimaryEmailAddress;
            field_BackupEmailAddress = source.field_BackupEmailAddress;
        }

        public ModifyAccountRequest(IModifyAccountRequest source) : base(source)
        {
            field_AccessToken = source.AccessToken;
            field_ShortName = source.ShortName;
            field_PrimaryEmailAddress = source.PrimaryEmailAddress;
            field_BackupEmailAddress = source.BackupEmailAddress;
        }

        public bool Equals(ModifyAccountRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AccessToken.ValueEquals(other.field_AccessToken)) return false;
            if (!field_ShortName.ValueEquals(other.field_ShortName)) return false;
            if (!field_PrimaryEmailAddress.ValueEquals(other.field_PrimaryEmailAddress)) return false;
            if (!field_BackupEmailAddress.ValueEquals(other.field_BackupEmailAddress)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(ModifyAccountRequest left, ModifyAccountRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(ModifyAccountRequest left, ModifyAccountRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is ModifyAccountRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AccessToken.CalcHashUnary());
            hc.Add(field_ShortName.CalcHashUnary());
            hc.Add(field_PrimaryEmailAddress.CalcHashUnary());
            hc.Add(field_BackupEmailAddress.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class ModifyAccountResponse_Factory : IEntityFactory<IModifyAccountResponse, ModifyAccountResponse>
    {
        private static readonly ModifyAccountResponse_Factory _instance = new ModifyAccountResponse_Factory();
        public static ModifyAccountResponse_Factory Instance => _instance;

        public ModifyAccountResponse? CreateFrom(IModifyAccountResponse? source)
        {
            if (source is null) return null;
            if (source is ModifyAccountResponse sibling && sibling.IsFrozen()) return sibling;
            return new ModifyAccountResponse(source);
        }

        private static readonly ModifyAccountResponse _empty = new ModifyAccountResponse().Frozen();
        public ModifyAccountResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class ModifyAccountResponse : AccountResponse, IModifyAccountResponse, IEquatable<ModifyAccountResponse>, ICopyFrom<ModifyAccountResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 30;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_VerifyToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? VerifyToken
        {
            get => field_VerifyToken;
            set => field_VerifyToken = CheckNotFrozen(ref value);
        }

        // ---------- IModifyAccountResponse methods ----------
        String? IModifyAccountResponse.VerifyToken => field_VerifyToken;

        public ModifyAccountResponse()
        {
        }

        public ModifyAccountResponse(ModifyAccountResponse source) : base(source)
        {
            field_VerifyToken = source.field_VerifyToken;
        }

        public void CopyFrom(ModifyAccountResponse source)
        {
            base.CopyFrom(source);
            field_VerifyToken = source.field_VerifyToken;
        }

        public ModifyAccountResponse(IModifyAccountResponse source) : base(source)
        {
            field_VerifyToken = source.VerifyToken;
        }

        public bool Equals(ModifyAccountResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_VerifyToken.ValueEquals(other.field_VerifyToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(ModifyAccountResponse left, ModifyAccountResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(ModifyAccountResponse left, ModifyAccountResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is ModifyAccountResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_VerifyToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetSecretRequest_Factory : IEntityFactory<IGetSecretRequest, GetSecretRequest>
    {
        private static readonly GetSecretRequest_Factory _instance = new GetSecretRequest_Factory();
        public static GetSecretRequest_Factory Instance => _instance;

        public GetSecretRequest? CreateFrom(IGetSecretRequest? source)
        {
            if (source is null) return null;
            if (source is GetSecretRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetSecretRequest(source);
        }

        private static readonly GetSecretRequest _empty = new GetSecretRequest().Frozen();
        public GetSecretRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetSecretRequest : AccountRequest, IGetSecretRequest, IEquatable<GetSecretRequest>, ICopyFrom<GetSecretRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 33;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_LicenseCode;
        private GuidValue field_SecretGuid;

        // ---------- accessors ----------
        [Key(20)]
        public String? LicenseCode
        {
            get => field_LicenseCode;
            set => field_LicenseCode = CheckNotFrozen(ref value);
        }
        [Key(21)]
        public GuidValue SecretGuid
        {
            get => field_SecretGuid;
            set => field_SecretGuid = CheckNotFrozen(ref value);
        }

        // ---------- IGetSecretRequest methods ----------
        String? IGetSecretRequest.LicenseCode => field_LicenseCode;
        Guid IGetSecretRequest.SecretGuid => field_SecretGuid.ToExternal();

        public GetSecretRequest()
        {
        }

        public GetSecretRequest(GetSecretRequest source) : base(source)
        {
            field_LicenseCode = source.field_LicenseCode;
            field_SecretGuid = source.field_SecretGuid;
        }

        public void CopyFrom(GetSecretRequest source)
        {
            base.CopyFrom(source);
            field_LicenseCode = source.field_LicenseCode;
            field_SecretGuid = source.field_SecretGuid;
        }

        public GetSecretRequest(IGetSecretRequest source) : base(source)
        {
            field_LicenseCode = source.LicenseCode;
            field_SecretGuid = source.SecretGuid.ToInternal();
        }

        public bool Equals(GetSecretRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_LicenseCode.ValueEquals(other.field_LicenseCode)) return false;
            if (!field_SecretGuid.ValueEquals(other.field_SecretGuid)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetSecretRequest left, GetSecretRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetSecretRequest left, GetSecretRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetSecretRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_LicenseCode.CalcHashUnary());
            hc.Add(field_SecretGuid.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetSecretResponse_Factory : IEntityFactory<IGetSecretResponse, GetSecretResponse>
    {
        private static readonly GetSecretResponse_Factory _instance = new GetSecretResponse_Factory();
        public static GetSecretResponse_Factory Instance => _instance;

        public GetSecretResponse? CreateFrom(IGetSecretResponse? source)
        {
            if (source is null) return null;
            if (source is GetSecretResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetSecretResponse(source);
        }

        private static readonly GetSecretResponse _empty = new GetSecretResponse().Frozen();
        public GetSecretResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetSecretResponse : AccountResponse, IGetSecretResponse, IEquatable<GetSecretResponse>, ICopyFrom<GetSecretResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 34;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private GuidValue field_SecretGuid;
        private String? field_SecretText;

        // ---------- accessors ----------
        [Key(21)]
        public GuidValue SecretGuid
        {
            get => field_SecretGuid;
            set => field_SecretGuid = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public String? SecretText
        {
            get => field_SecretText;
            set => field_SecretText = CheckNotFrozen(ref value);
        }

        // ---------- IGetSecretResponse methods ----------
        Guid IGetSecretResponse.SecretGuid => field_SecretGuid.ToExternal();
        String? IGetSecretResponse.SecretText => field_SecretText;

        public GetSecretResponse()
        {
        }

        public GetSecretResponse(GetSecretResponse source) : base(source)
        {
            field_SecretGuid = source.field_SecretGuid;
            field_SecretText = source.field_SecretText;
        }

        public void CopyFrom(GetSecretResponse source)
        {
            base.CopyFrom(source);
            field_SecretGuid = source.field_SecretGuid;
            field_SecretText = source.field_SecretText;
        }

        public GetSecretResponse(IGetSecretResponse source) : base(source)
        {
            field_SecretGuid = source.SecretGuid.ToInternal();
            field_SecretText = source.SecretText;
        }

        public bool Equals(GetSecretResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_SecretGuid.ValueEquals(other.field_SecretGuid)) return false;
            if (!field_SecretText.ValueEquals(other.field_SecretText)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetSecretResponse left, GetSecretResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetSecretResponse left, GetSecretResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetSecretResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_SecretGuid.CalcHashUnary());
            hc.Add(field_SecretText.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetAdminTokenRequest_Factory : IEntityFactory<IGetAdminTokenRequest, GetAdminTokenRequest>
    {
        private static readonly GetAdminTokenRequest_Factory _instance = new GetAdminTokenRequest_Factory();
        public static GetAdminTokenRequest_Factory Instance => _instance;

        public GetAdminTokenRequest? CreateFrom(IGetAdminTokenRequest? source)
        {
            if (source is null) return null;
            if (source is GetAdminTokenRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetAdminTokenRequest(source);
        }

        private static readonly GetAdminTokenRequest _empty = new GetAdminTokenRequest().Frozen();
        public GetAdminTokenRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetAdminTokenRequest : AccountRequest, IGetAdminTokenRequest, IEquatable<GetAdminTokenRequest>, ICopyFrom<GetAdminTokenRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 35;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AccessToken;
        private String? field_MasterToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? AccessToken
        {
            get => field_AccessToken;
            set => field_AccessToken = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public String? MasterToken
        {
            get => field_MasterToken;
            set => field_MasterToken = CheckNotFrozen(ref value);
        }

        // ---------- IGetAdminTokenRequest methods ----------
        String? IGetAdminTokenRequest.AccessToken => field_AccessToken;
        String? IGetAdminTokenRequest.MasterToken => field_MasterToken;

        public GetAdminTokenRequest()
        {
        }

        public GetAdminTokenRequest(GetAdminTokenRequest source) : base(source)
        {
            field_AccessToken = source.field_AccessToken;
            field_MasterToken = source.field_MasterToken;
        }

        public void CopyFrom(GetAdminTokenRequest source)
        {
            base.CopyFrom(source);
            field_AccessToken = source.field_AccessToken;
            field_MasterToken = source.field_MasterToken;
        }

        public GetAdminTokenRequest(IGetAdminTokenRequest source) : base(source)
        {
            field_AccessToken = source.AccessToken;
            field_MasterToken = source.MasterToken;
        }

        public bool Equals(GetAdminTokenRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AccessToken.ValueEquals(other.field_AccessToken)) return false;
            if (!field_MasterToken.ValueEquals(other.field_MasterToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetAdminTokenRequest left, GetAdminTokenRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetAdminTokenRequest left, GetAdminTokenRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetAdminTokenRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AccessToken.CalcHashUnary());
            hc.Add(field_MasterToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetAdminTokenResponse_Factory : IEntityFactory<IGetAdminTokenResponse, GetAdminTokenResponse>
    {
        private static readonly GetAdminTokenResponse_Factory _instance = new GetAdminTokenResponse_Factory();
        public static GetAdminTokenResponse_Factory Instance => _instance;

        public GetAdminTokenResponse? CreateFrom(IGetAdminTokenResponse? source)
        {
            if (source is null) return null;
            if (source is GetAdminTokenResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetAdminTokenResponse(source);
        }

        private static readonly GetAdminTokenResponse _empty = new GetAdminTokenResponse().Frozen();
        public GetAdminTokenResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetAdminTokenResponse : AccountResponse, IGetAdminTokenResponse, IEquatable<GetAdminTokenResponse>, ICopyFrom<GetAdminTokenResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 36;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AdminToken;

        // ---------- accessors ----------
        [Key(21)]
        public String? AdminToken
        {
            get => field_AdminToken;
            set => field_AdminToken = CheckNotFrozen(ref value);
        }

        // ---------- IGetAdminTokenResponse methods ----------
        String? IGetAdminTokenResponse.AdminToken => field_AdminToken;

        public GetAdminTokenResponse()
        {
        }

        public GetAdminTokenResponse(GetAdminTokenResponse source) : base(source)
        {
            field_AdminToken = source.field_AdminToken;
        }

        public void CopyFrom(GetAdminTokenResponse source)
        {
            base.CopyFrom(source);
            field_AdminToken = source.field_AdminToken;
        }

        public GetAdminTokenResponse(IGetAdminTokenResponse source) : base(source)
        {
            field_AdminToken = source.AdminToken;
        }

        public bool Equals(GetAdminTokenResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AdminToken.ValueEquals(other.field_AdminToken)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetAdminTokenResponse left, GetAdminTokenResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetAdminTokenResponse left, GetAdminTokenResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetAdminTokenResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AdminToken.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class AddSecretRequest_Factory : IEntityFactory<IAddSecretRequest, AddSecretRequest>
    {
        private static readonly AddSecretRequest_Factory _instance = new AddSecretRequest_Factory();
        public static AddSecretRequest_Factory Instance => _instance;

        public AddSecretRequest? CreateFrom(IAddSecretRequest? source)
        {
            if (source is null) return null;
            if (source is AddSecretRequest sibling && sibling.IsFrozen()) return sibling;
            return new AddSecretRequest(source);
        }

        private static readonly AddSecretRequest _empty = new AddSecretRequest().Frozen();
        public AddSecretRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class AddSecretRequest : AccountRequest, IAddSecretRequest, IEquatable<AddSecretRequest>, ICopyFrom<AddSecretRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 37;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AdminToken;
        private GuidValue field_SecretGuid;
        private String? field_SecretText;

        // ---------- accessors ----------
        [Key(20)]
        public String? AdminToken
        {
            get => field_AdminToken;
            set => field_AdminToken = CheckNotFrozen(ref value);
        }
        [Key(21)]
        public GuidValue SecretGuid
        {
            get => field_SecretGuid;
            set => field_SecretGuid = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public String? SecretText
        {
            get => field_SecretText;
            set => field_SecretText = CheckNotFrozen(ref value);
        }

        // ---------- IAddSecretRequest methods ----------
        String? IAddSecretRequest.AdminToken => field_AdminToken;
        Guid IAddSecretRequest.SecretGuid => field_SecretGuid.ToExternal();
        String? IAddSecretRequest.SecretText => field_SecretText;

        public AddSecretRequest()
        {
        }

        public AddSecretRequest(AddSecretRequest source) : base(source)
        {
            field_AdminToken = source.field_AdminToken;
            field_SecretGuid = source.field_SecretGuid;
            field_SecretText = source.field_SecretText;
        }

        public void CopyFrom(AddSecretRequest source)
        {
            base.CopyFrom(source);
            field_AdminToken = source.field_AdminToken;
            field_SecretGuid = source.field_SecretGuid;
            field_SecretText = source.field_SecretText;
        }

        public AddSecretRequest(IAddSecretRequest source) : base(source)
        {
            field_AdminToken = source.AdminToken;
            field_SecretGuid = source.SecretGuid.ToInternal();
            field_SecretText = source.SecretText;
        }

        public bool Equals(AddSecretRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AdminToken.ValueEquals(other.field_AdminToken)) return false;
            if (!field_SecretGuid.ValueEquals(other.field_SecretGuid)) return false;
            if (!field_SecretText.ValueEquals(other.field_SecretText)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(AddSecretRequest left, AddSecretRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(AddSecretRequest left, AddSecretRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is AddSecretRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AdminToken.CalcHashUnary());
            hc.Add(field_SecretGuid.CalcHashUnary());
            hc.Add(field_SecretText.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class AddSecretResponse_Factory : IEntityFactory<IAddSecretResponse, AddSecretResponse>
    {
        private static readonly AddSecretResponse_Factory _instance = new AddSecretResponse_Factory();
        public static AddSecretResponse_Factory Instance => _instance;

        public AddSecretResponse? CreateFrom(IAddSecretResponse? source)
        {
            if (source is null) return null;
            if (source is AddSecretResponse sibling && sibling.IsFrozen()) return sibling;
            return new AddSecretResponse(source);
        }

        private static readonly AddSecretResponse _empty = new AddSecretResponse().Frozen();
        public AddSecretResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class AddSecretResponse : AccountResponse, IAddSecretResponse, IEquatable<AddSecretResponse>, ICopyFrom<AddSecretResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 38;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IAddSecretResponse methods ----------

        public AddSecretResponse()
        {
        }

        public AddSecretResponse(AddSecretResponse source) : base(source)
        {
        }

        public void CopyFrom(AddSecretResponse source)
        {
            base.CopyFrom(source);
        }

        public AddSecretResponse(IAddSecretResponse source) : base(source)
        {
        }

        public bool Equals(AddSecretResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(AddSecretResponse left, AddSecretResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(AddSecretResponse left, AddSecretResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is AddSecretResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CommencePurchaseRequest_Factory : IEntityFactory<ICommencePurchaseRequest, CommencePurchaseRequest>
    {
        private static readonly CommencePurchaseRequest_Factory _instance = new CommencePurchaseRequest_Factory();
        public static CommencePurchaseRequest_Factory Instance => _instance;

        public CommencePurchaseRequest? CreateFrom(ICommencePurchaseRequest? source)
        {
            if (source is null) return null;
            if (source is CommencePurchaseRequest sibling && sibling.IsFrozen()) return sibling;
            return new CommencePurchaseRequest(source);
        }

        private static readonly CommencePurchaseRequest _empty = new CommencePurchaseRequest().Frozen();
        public CommencePurchaseRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class CommencePurchaseRequest : AccountRequest, ICommencePurchaseRequest, IEquatable<CommencePurchaseRequest>, ICopyFrom<CommencePurchaseRequest>
    {
        protected override void OnFreeze()
        {
            field_CreditCard?.Freeze();
            base.OnFreeze();
        }

        public new const int EntityTag = 41;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AccessToken;
        private CreditCardDetails? field_CreditCard;
        private String? field_LicenseTier;

        // ---------- accessors ----------
        [Key(21)]
        public String? AccessToken
        {
            get => field_AccessToken;
            set => field_AccessToken = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public CreditCardDetails? CreditCard
        {
            get => field_CreditCard;
            set => field_CreditCard = CheckNotFrozen(ref value);
        }
        [Key(23)]
        public String? LicenseTier
        {
            get => field_LicenseTier;
            set => field_LicenseTier = CheckNotFrozen(ref value);
        }

        // ---------- ICommencePurchaseRequest methods ----------
        String? ICommencePurchaseRequest.AccessToken => field_AccessToken;
        ICreditCardDetails? ICommencePurchaseRequest.CreditCard => field_CreditCard;
        String? ICommencePurchaseRequest.LicenseTier => field_LicenseTier;

        public CommencePurchaseRequest()
        {
        }

        public CommencePurchaseRequest(CommencePurchaseRequest source) : base(source)
        {
            field_AccessToken = source.field_AccessToken;
            field_CreditCard = source.field_CreditCard;
            field_LicenseTier = source.field_LicenseTier;
        }

        public void CopyFrom(CommencePurchaseRequest source)
        {
            base.CopyFrom(source);
            field_AccessToken = source.field_AccessToken;
            field_CreditCard = source.field_CreditCard;
            field_LicenseTier = source.field_LicenseTier;
        }

        public CommencePurchaseRequest(ICommencePurchaseRequest source) : base(source)
        {
            field_AccessToken = source.AccessToken;
            field_CreditCard = CreditCardDetails_Factory.Instance.CreateFrom(source.CreditCard);
            field_LicenseTier = source.LicenseTier;
        }

        public bool Equals(CommencePurchaseRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AccessToken.ValueEquals(other.field_AccessToken)) return false;
            if (!field_CreditCard.ValueEquals(other.field_CreditCard)) return false;
            if (!field_LicenseTier.ValueEquals(other.field_LicenseTier)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CommencePurchaseRequest left, CommencePurchaseRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CommencePurchaseRequest left, CommencePurchaseRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CommencePurchaseRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AccessToken.CalcHashUnary());
            hc.Add(field_CreditCard.CalcHashUnary());
            hc.Add(field_LicenseTier.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CommencePurchaseResponse_Factory : IEntityFactory<ICommencePurchaseResponse, CommencePurchaseResponse>
    {
        private static readonly CommencePurchaseResponse_Factory _instance = new CommencePurchaseResponse_Factory();
        public static CommencePurchaseResponse_Factory Instance => _instance;

        public CommencePurchaseResponse? CreateFrom(ICommencePurchaseResponse? source)
        {
            if (source is null) return null;
            if (source is CommencePurchaseResponse sibling && sibling.IsFrozen()) return sibling;
            return new CommencePurchaseResponse(source);
        }

        private static readonly CommencePurchaseResponse _empty = new CommencePurchaseResponse().Frozen();
        public CommencePurchaseResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class CommencePurchaseResponse : AccountResponse, ICommencePurchaseResponse, IEquatable<CommencePurchaseResponse>, ICopyFrom<CommencePurchaseResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 42;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- ICommencePurchaseResponse methods ----------

        public CommencePurchaseResponse()
        {
        }

        public CommencePurchaseResponse(CommencePurchaseResponse source) : base(source)
        {
        }

        public void CopyFrom(CommencePurchaseResponse source)
        {
            base.CopyFrom(source);
        }

        public CommencePurchaseResponse(ICommencePurchaseResponse source) : base(source)
        {
        }

        public bool Equals(CommencePurchaseResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(CommencePurchaseResponse left, CommencePurchaseResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CommencePurchaseResponse left, CommencePurchaseResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CommencePurchaseResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CompletePurchaseRequest_Factory : IEntityFactory<ICompletePurchaseRequest, CompletePurchaseRequest>
    {
        private static readonly CompletePurchaseRequest_Factory _instance = new CompletePurchaseRequest_Factory();
        public static CompletePurchaseRequest_Factory Instance => _instance;

        public CompletePurchaseRequest? CreateFrom(ICompletePurchaseRequest? source)
        {
            if (source is null) return null;
            if (source is CompletePurchaseRequest sibling && sibling.IsFrozen()) return sibling;
            return new CompletePurchaseRequest(source);
        }

        private static readonly CompletePurchaseRequest _empty = new CompletePurchaseRequest().Frozen();
        public CompletePurchaseRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class CompletePurchaseRequest : AccountRequest, ICompletePurchaseRequest, IEquatable<CompletePurchaseRequest>, ICopyFrom<CompletePurchaseRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 43;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AccessToken;
        private String? field_VerifyCode;

        // ---------- accessors ----------
        [Key(21)]
        public String? AccessToken
        {
            get => field_AccessToken;
            set => field_AccessToken = CheckNotFrozen(ref value);
        }
        [Key(25)]
        public String? VerifyCode
        {
            get => field_VerifyCode;
            set => field_VerifyCode = CheckNotFrozen(ref value);
        }

        // ---------- ICompletePurchaseRequest methods ----------
        String? ICompletePurchaseRequest.AccessToken => field_AccessToken;
        String? ICompletePurchaseRequest.VerifyCode => field_VerifyCode;

        public CompletePurchaseRequest()
        {
        }

        public CompletePurchaseRequest(CompletePurchaseRequest source) : base(source)
        {
            field_AccessToken = source.field_AccessToken;
            field_VerifyCode = source.field_VerifyCode;
        }

        public void CopyFrom(CompletePurchaseRequest source)
        {
            base.CopyFrom(source);
            field_AccessToken = source.field_AccessToken;
            field_VerifyCode = source.field_VerifyCode;
        }

        public CompletePurchaseRequest(ICompletePurchaseRequest source) : base(source)
        {
            field_AccessToken = source.AccessToken;
            field_VerifyCode = source.VerifyCode;
        }

        public bool Equals(CompletePurchaseRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AccessToken.ValueEquals(other.field_AccessToken)) return false;
            if (!field_VerifyCode.ValueEquals(other.field_VerifyCode)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CompletePurchaseRequest left, CompletePurchaseRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CompletePurchaseRequest left, CompletePurchaseRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CompletePurchaseRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AccessToken.CalcHashUnary());
            hc.Add(field_VerifyCode.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CompletePurchaseResponse_Factory : IEntityFactory<ICompletePurchaseResponse, CompletePurchaseResponse>
    {
        private static readonly CompletePurchaseResponse_Factory _instance = new CompletePurchaseResponse_Factory();
        public static CompletePurchaseResponse_Factory Instance => _instance;

        public CompletePurchaseResponse? CreateFrom(ICompletePurchaseResponse? source)
        {
            if (source is null) return null;
            if (source is CompletePurchaseResponse sibling && sibling.IsFrozen()) return sibling;
            return new CompletePurchaseResponse(source);
        }

        private static readonly CompletePurchaseResponse _empty = new CompletePurchaseResponse().Frozen();
        public CompletePurchaseResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class CompletePurchaseResponse : AccountResponse, ICompletePurchaseResponse, IEquatable<CompletePurchaseResponse>, ICopyFrom<CompletePurchaseResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 44;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_LicenseCode;

        // ---------- accessors ----------
        [Key(21)]
        public String? LicenseCode
        {
            get => field_LicenseCode;
            set => field_LicenseCode = CheckNotFrozen(ref value);
        }

        // ---------- ICompletePurchaseResponse methods ----------
        String? ICompletePurchaseResponse.LicenseCode => field_LicenseCode;

        public CompletePurchaseResponse()
        {
        }

        public CompletePurchaseResponse(CompletePurchaseResponse source) : base(source)
        {
            field_LicenseCode = source.field_LicenseCode;
        }

        public void CopyFrom(CompletePurchaseResponse source)
        {
            base.CopyFrom(source);
            field_LicenseCode = source.field_LicenseCode;
        }

        public CompletePurchaseResponse(ICompletePurchaseResponse source) : base(source)
        {
            field_LicenseCode = source.LicenseCode;
        }

        public bool Equals(CompletePurchaseResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_LicenseCode.ValueEquals(other.field_LicenseCode)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CompletePurchaseResponse left, CompletePurchaseResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CompletePurchaseResponse left, CompletePurchaseResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CompletePurchaseResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_LicenseCode.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class CreditCardDetails_Factory : IEntityFactory<ICreditCardDetails, CreditCardDetails>
    {
        private static readonly CreditCardDetails_Factory _instance = new CreditCardDetails_Factory();
        public static CreditCardDetails_Factory Instance => _instance;

        public CreditCardDetails? CreateFrom(ICreditCardDetails? source)
        {
            if (source is null) return null;
            if (source is CreditCardDetails sibling && sibling.IsFrozen()) return sibling;
            return new CreditCardDetails(source);
        }

        private static readonly CreditCardDetails _empty = new CreditCardDetails().Frozen();
        public CreditCardDetails Empty => _empty;
    }
    [MessagePackObject]
    public partial class CreditCardDetails : EntityBase, ICreditCardDetails, IEquatable<CreditCardDetails>, ICopyFrom<CreditCardDetails>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 45;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_Number;
        private UInt16 field_ExpiryYear;
        private Byte field_ExpiryMonth;
        private String? field_CVC;

        // ---------- accessors ----------
        [Key(1)]
        public String? Number
        {
            get => field_Number;
            set => field_Number = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public UInt16 ExpiryYear
        {
            get => field_ExpiryYear;
            set => field_ExpiryYear = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public Byte ExpiryMonth
        {
            get => field_ExpiryMonth;
            set => field_ExpiryMonth = CheckNotFrozen(ref value);
        }
        [Key(4)]
        public String? CVC
        {
            get => field_CVC;
            set => field_CVC = CheckNotFrozen(ref value);
        }

        // ---------- ICreditCardDetails methods ----------
        String? ICreditCardDetails.Number => field_Number;
        UInt16 ICreditCardDetails.ExpiryYear => field_ExpiryYear.ToExternal();
        Byte ICreditCardDetails.ExpiryMonth => field_ExpiryMonth.ToExternal();
        String? ICreditCardDetails.CVC => field_CVC;

        public CreditCardDetails()
        {
        }

        public CreditCardDetails(CreditCardDetails source) : base(source)
        {
            field_Number = source.field_Number;
            field_ExpiryYear = source.field_ExpiryYear;
            field_ExpiryMonth = source.field_ExpiryMonth;
            field_CVC = source.field_CVC;
        }

        public void CopyFrom(CreditCardDetails source)
        {
            base.CopyFrom(source);
            field_Number = source.field_Number;
            field_ExpiryYear = source.field_ExpiryYear;
            field_ExpiryMonth = source.field_ExpiryMonth;
            field_CVC = source.field_CVC;
        }

        public CreditCardDetails(ICreditCardDetails source) : base(source)
        {
            field_Number = source.Number;
            field_ExpiryYear = source.ExpiryYear.ToInternal();
            field_ExpiryMonth = source.ExpiryMonth.ToInternal();
            field_CVC = source.CVC;
        }

        public bool Equals(CreditCardDetails? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Number.ValueEquals(other.field_Number)) return false;
            if (!field_ExpiryYear.ValueEquals(other.field_ExpiryYear)) return false;
            if (!field_ExpiryMonth.ValueEquals(other.field_ExpiryMonth)) return false;
            if (!field_CVC.ValueEquals(other.field_CVC)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(CreditCardDetails left, CreditCardDetails right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(CreditCardDetails left, CreditCardDetails right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is CreditCardDetails other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Number.CalcHashUnary());
            hc.Add(field_ExpiryYear.CalcHashUnary());
            hc.Add(field_ExpiryMonth.CalcHashUnary());
            hc.Add(field_CVC.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }


}
