#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: MessagePack.2.9
// Metadata : MetaFac.Service.CG5.Schema
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace MetaFac.Service.CG5
{


    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source) => CheckNotFrozen();
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }


    [Union(BaseRequest.EntityTag, typeof(BaseRequest))]
    [Union(GetServerInfoRequest.EntityTag, typeof(GetServerInfoRequest))]
    [Union(GetGeneratorsInfoRequest.EntityTag, typeof(GetGeneratorsInfoRequest))]
    [Union(GetTemplateNamesRequest.EntityTag, typeof(GetTemplateNamesRequest))]
    [Union(GetTemplateRequest.EntityTag, typeof(GetTemplateRequest))]
    [Union(BaseResponse.EntityTag, typeof(BaseResponse))]
    [Union(GetServerInfoResponse.EntityTag, typeof(GetServerInfoResponse))]
    [Union(GetGeneratorsInfoResponse.EntityTag, typeof(GetGeneratorsInfoResponse))]
    [Union(GetTemplateNamesResponse.EntityTag, typeof(GetTemplateNamesResponse))]
    [Union(GetTemplateResponse.EntityTag, typeof(GetTemplateResponse))]
    public abstract partial class BaseMessage
    {
    }
    public sealed class BaseMessage_Factory : IEntityFactory<IBaseMessage, BaseMessage>
    {
        private static readonly BaseMessage_Factory _instance = new BaseMessage_Factory();
        public static BaseMessage_Factory Instance => _instance;

        public BaseMessage? CreateFrom(IBaseMessage? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case BaseRequest.EntityTag: return BaseRequest_Factory.Instance.CreateFrom((IBaseRequest)source);
                case GetServerInfoRequest.EntityTag: return GetServerInfoRequest_Factory.Instance.CreateFrom((IGetServerInfoRequest)source);
                case GetGeneratorsInfoRequest.EntityTag: return GetGeneratorsInfoRequest_Factory.Instance.CreateFrom((IGetGeneratorsInfoRequest)source);
                case GetTemplateNamesRequest.EntityTag: return GetTemplateNamesRequest_Factory.Instance.CreateFrom((IGetTemplateNamesRequest)source);
                case GetTemplateRequest.EntityTag: return GetTemplateRequest_Factory.Instance.CreateFrom((IGetTemplateRequest)source);
                case BaseResponse.EntityTag: return BaseResponse_Factory.Instance.CreateFrom((IBaseResponse)source);
                case GetServerInfoResponse.EntityTag: return GetServerInfoResponse_Factory.Instance.CreateFrom((IGetServerInfoResponse)source);
                case GetGeneratorsInfoResponse.EntityTag: return GetGeneratorsInfoResponse_Factory.Instance.CreateFrom((IGetGeneratorsInfoResponse)source);
                case GetTemplateNamesResponse.EntityTag: return GetTemplateNamesResponse_Factory.Instance.CreateFrom((IGetTemplateNamesResponse)source);
                case GetTemplateResponse.EntityTag: return GetTemplateResponse_Factory.Instance.CreateFrom((IGetTemplateResponse)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseMessage)} from {source.GetType().Name}");
            }
        }

        public BaseMessage Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseMessage)}");
    }
    [MessagePackObject]
    public partial class BaseMessage : EntityBase, IBaseMessage, IEquatable<BaseMessage>, ICopyFrom<BaseMessage>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private GuidValue field_RequestId;

        // ---------- accessors ----------
        [Key(1)]
        public GuidValue RequestId
        {
            get => field_RequestId;
            set => field_RequestId = CheckNotFrozen(ref value);
        }

        // ---------- IBaseMessage methods ----------
        Guid IBaseMessage.RequestId => field_RequestId.ToExternal();

        public BaseMessage()
        {
        }

        public BaseMessage(BaseMessage source) : base(source)
        {
            field_RequestId = source.field_RequestId;
        }

        public void CopyFrom(BaseMessage source)
        {
            base.CopyFrom(source);
            field_RequestId = source.field_RequestId;
        }

        public BaseMessage(IBaseMessage source) : base(source)
        {
            field_RequestId = source.RequestId.ToInternal();
        }

        public bool Equals(BaseMessage? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_RequestId.ValueEquals(other.field_RequestId)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(BaseMessage left, BaseMessage right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseMessage left, BaseMessage right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseMessage other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_RequestId.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetServerInfoRequest.EntityTag, typeof(GetServerInfoRequest))]
    [Union(GetGeneratorsInfoRequest.EntityTag, typeof(GetGeneratorsInfoRequest))]
    [Union(GetTemplateNamesRequest.EntityTag, typeof(GetTemplateNamesRequest))]
    [Union(GetTemplateRequest.EntityTag, typeof(GetTemplateRequest))]
    public abstract partial class BaseRequest
    {
    }
    public sealed class BaseRequest_Factory : IEntityFactory<IBaseRequest, BaseRequest>
    {
        private static readonly BaseRequest_Factory _instance = new BaseRequest_Factory();
        public static BaseRequest_Factory Instance => _instance;

        public BaseRequest? CreateFrom(IBaseRequest? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetServerInfoRequest.EntityTag: return GetServerInfoRequest_Factory.Instance.CreateFrom((IGetServerInfoRequest)source);
                case GetGeneratorsInfoRequest.EntityTag: return GetGeneratorsInfoRequest_Factory.Instance.CreateFrom((IGetGeneratorsInfoRequest)source);
                case GetTemplateNamesRequest.EntityTag: return GetTemplateNamesRequest_Factory.Instance.CreateFrom((IGetTemplateNamesRequest)source);
                case GetTemplateRequest.EntityTag: return GetTemplateRequest_Factory.Instance.CreateFrom((IGetTemplateRequest)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseRequest)} from {source.GetType().Name}");
            }
        }

        public BaseRequest Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseRequest)}");
    }
    [MessagePackObject]
    public partial class BaseRequest : BaseMessage, IBaseRequest, IEquatable<BaseRequest>, ICopyFrom<BaseRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IBaseRequest methods ----------

        public BaseRequest()
        {
        }

        public BaseRequest(BaseRequest source) : base(source)
        {
        }

        public void CopyFrom(BaseRequest source)
        {
            base.CopyFrom(source);
        }

        public BaseRequest(IBaseRequest source) : base(source)
        {
        }

        public bool Equals(BaseRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(BaseRequest left, BaseRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseRequest left, BaseRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    [Union(GetServerInfoResponse.EntityTag, typeof(GetServerInfoResponse))]
    [Union(GetGeneratorsInfoResponse.EntityTag, typeof(GetGeneratorsInfoResponse))]
    [Union(GetTemplateNamesResponse.EntityTag, typeof(GetTemplateNamesResponse))]
    [Union(GetTemplateResponse.EntityTag, typeof(GetTemplateResponse))]
    public abstract partial class BaseResponse
    {
    }
    public sealed class BaseResponse_Factory : IEntityFactory<IBaseResponse, BaseResponse>
    {
        private static readonly BaseResponse_Factory _instance = new BaseResponse_Factory();
        public static BaseResponse_Factory Instance => _instance;

        public BaseResponse? CreateFrom(IBaseResponse? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case GetServerInfoResponse.EntityTag: return GetServerInfoResponse_Factory.Instance.CreateFrom((IGetServerInfoResponse)source);
                case GetGeneratorsInfoResponse.EntityTag: return GetGeneratorsInfoResponse_Factory.Instance.CreateFrom((IGetGeneratorsInfoResponse)source);
                case GetTemplateNamesResponse.EntityTag: return GetTemplateNamesResponse_Factory.Instance.CreateFrom((IGetTemplateNamesResponse)source);
                case GetTemplateResponse.EntityTag: return GetTemplateResponse_Factory.Instance.CreateFrom((IGetTemplateResponse)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BaseResponse)} from {source.GetType().Name}");
            }
        }

        public BaseResponse Empty => throw new NotSupportedException($"Cannot create abstract entity: {typeof(BaseResponse)}");
    }
    [MessagePackObject]
    public partial class BaseResponse : BaseMessage, IBaseResponse, IEquatable<BaseResponse>, ICopyFrom<BaseResponse>
    {
        protected override void OnFreeze()
        {
            if (field_Messages is not null)
            {
                foreach (var element in field_Messages)
                {
                    element?.Freeze();
                }
            }
            base.OnFreeze();
        }

        public new const int EntityTag = 3;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private Boolean field_Succeeded;
        private String? field_FailReason;
        private ImmutableList<LogMessage?>? field_Messages;

        // ---------- accessors ----------
        [Key(2)]
        public Boolean Succeeded
        {
            get => field_Succeeded;
            set => field_Succeeded = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public String? FailReason
        {
            get => field_FailReason;
            set => field_FailReason = CheckNotFrozen(ref value);
        }
        [Key(4)]
        public ImmutableList<LogMessage?>? Messages
        {
            get => field_Messages;
            set => field_Messages = CheckNotFrozen(ref value);
        }

        // ---------- IBaseResponse methods ----------
        Boolean IBaseResponse.Succeeded => field_Succeeded.ToExternal();
        String? IBaseResponse.FailReason => field_FailReason;
        IReadOnlyList<ILogMessage?>? IBaseResponse.Messages => field_Messages;

        public BaseResponse()
        {
        }

        public BaseResponse(BaseResponse source) : base(source)
        {
            field_Succeeded = source.field_Succeeded;
            field_FailReason = source.field_FailReason;
            field_Messages = source.field_Messages;
        }

        public void CopyFrom(BaseResponse source)
        {
            base.CopyFrom(source);
            field_Succeeded = source.field_Succeeded;
            field_FailReason = source.field_FailReason;
            field_Messages = source.field_Messages;
        }

        public BaseResponse(IBaseResponse source) : base(source)
        {
            field_Succeeded = source.Succeeded.ToInternal();
            field_FailReason = source.FailReason;
            field_Messages = source.Messages is null
                ? null
                : ImmutableList<LogMessage?>.Empty.AddRange(source.Messages.Select(x => LogMessage_Factory.Instance.CreateFrom(x)));
        }

        public bool Equals(BaseResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Succeeded.ValueEquals(other.field_Succeeded)) return false;
            if (!field_FailReason.ValueEquals(other.field_FailReason)) return false;
            if (!field_Messages.ArrayEquals(other.field_Messages)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(BaseResponse left, BaseResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BaseResponse left, BaseResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BaseResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Succeeded.CalcHashUnary());
            hc.Add(field_FailReason.CalcHashUnary());
            hc.Add(field_Messages.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class LogMessage_Factory : IEntityFactory<ILogMessage, LogMessage>
    {
        private static readonly LogMessage_Factory _instance = new LogMessage_Factory();
        public static LogMessage_Factory Instance => _instance;

        public LogMessage? CreateFrom(ILogMessage? source)
        {
            if (source is null) return null;
            if (source is LogMessage sibling && sibling.IsFrozen()) return sibling;
            return new LogMessage(source);
        }

        private static readonly LogMessage _empty = new LogMessage().Frozen();
        public LogMessage Empty => _empty;
    }
    [MessagePackObject]
    public partial class LogMessage : EntityBase, ILogMessage, IEquatable<LogMessage>, ICopyFrom<LogMessage>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 4;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private Int32 field_Severity;
        private String? field_MessageTemplate;
        private ImmutableList<String?>? field_MessageParameters;

        // ---------- accessors ----------
        [Key(1)]
        public Int32 Severity
        {
            get => field_Severity;
            set => field_Severity = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? MessageTemplate
        {
            get => field_MessageTemplate;
            set => field_MessageTemplate = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public ImmutableList<String?>? MessageParameters
        {
            get => field_MessageParameters;
            set => field_MessageParameters = CheckNotFrozen(ref value);
        }

        // ---------- ILogMessage methods ----------
        Int32 ILogMessage.Severity => field_Severity.ToExternal();
        String? ILogMessage.MessageTemplate => field_MessageTemplate;
        IReadOnlyList<String?>? ILogMessage.MessageParameters => field_MessageParameters;

        public LogMessage()
        {
        }

        public LogMessage(LogMessage source) : base(source)
        {
            field_Severity = source.field_Severity;
            field_MessageTemplate = source.field_MessageTemplate;
            field_MessageParameters = source.field_MessageParameters;
        }

        public void CopyFrom(LogMessage source)
        {
            base.CopyFrom(source);
            field_Severity = source.field_Severity;
            field_MessageTemplate = source.field_MessageTemplate;
            field_MessageParameters = source.field_MessageParameters;
        }

        public LogMessage(ILogMessage source) : base(source)
        {
            field_Severity = source.Severity.ToInternal();
            field_MessageTemplate = source.MessageTemplate;
            field_MessageParameters = source.MessageParameters is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.MessageParameters);
        }

        public bool Equals(LogMessage? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Severity.ValueEquals(other.field_Severity)) return false;
            if (!field_MessageTemplate.ValueEquals(other.field_MessageTemplate)) return false;
            if (!field_MessageParameters.ArrayEquals(other.field_MessageParameters)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(LogMessage left, LogMessage right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(LogMessage left, LogMessage right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is LogMessage other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Severity.CalcHashUnary());
            hc.Add(field_MessageTemplate.CalcHashUnary());
            hc.Add(field_MessageParameters.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class NameValuePair_Factory : IEntityFactory<INameValuePair, NameValuePair>
    {
        private static readonly NameValuePair_Factory _instance = new NameValuePair_Factory();
        public static NameValuePair_Factory Instance => _instance;

        public NameValuePair? CreateFrom(INameValuePair? source)
        {
            if (source is null) return null;
            if (source is NameValuePair sibling && sibling.IsFrozen()) return sibling;
            return new NameValuePair(source);
        }

        private static readonly NameValuePair _empty = new NameValuePair().Frozen();
        public NameValuePair Empty => _empty;
    }
    [MessagePackObject]
    public partial class NameValuePair : EntityBase, INameValuePair, IEquatable<NameValuePair>, ICopyFrom<NameValuePair>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 5;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_Name;
        private String? field_Value;

        // ---------- accessors ----------
        [Key(1)]
        public String? Name
        {
            get => field_Name;
            set => field_Name = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? Value
        {
            get => field_Value;
            set => field_Value = CheckNotFrozen(ref value);
        }

        // ---------- INameValuePair methods ----------
        String? INameValuePair.Name => field_Name;
        String? INameValuePair.Value => field_Value;

        public NameValuePair()
        {
        }

        public NameValuePair(NameValuePair source) : base(source)
        {
            field_Name = source.field_Name;
            field_Value = source.field_Value;
        }

        public void CopyFrom(NameValuePair source)
        {
            base.CopyFrom(source);
            field_Name = source.field_Name;
            field_Value = source.field_Value;
        }

        public NameValuePair(INameValuePair source) : base(source)
        {
            field_Name = source.Name;
            field_Value = source.Value;
        }

        public bool Equals(NameValuePair? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Name.ValueEquals(other.field_Name)) return false;
            if (!field_Value.ValueEquals(other.field_Value)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(NameValuePair left, NameValuePair right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(NameValuePair left, NameValuePair right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is NameValuePair other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Name.CalcHashUnary());
            hc.Add(field_Value.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GeneratorsInfo_Factory : IEntityFactory<IGeneratorsInfo, GeneratorsInfo>
    {
        private static readonly GeneratorsInfo_Factory _instance = new GeneratorsInfo_Factory();
        public static GeneratorsInfo_Factory Instance => _instance;

        public GeneratorsInfo? CreateFrom(IGeneratorsInfo? source)
        {
            if (source is null) return null;
            if (source is GeneratorsInfo sibling && sibling.IsFrozen()) return sibling;
            return new GeneratorsInfo(source);
        }

        private static readonly GeneratorsInfo _empty = new GeneratorsInfo().Frozen();
        public GeneratorsInfo Empty => _empty;
    }
    [MessagePackObject]
    public partial class GeneratorsInfo : EntityBase, IGeneratorsInfo, IEquatable<GeneratorsInfo>, ICopyFrom<GeneratorsInfo>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 6;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_AssmVersion;
        private String? field_InfoVersion;
        private String? field_FileVersion;

        // ---------- accessors ----------
        [Key(1)]
        public String? AssmVersion
        {
            get => field_AssmVersion;
            set => field_AssmVersion = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? InfoVersion
        {
            get => field_InfoVersion;
            set => field_InfoVersion = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public String? FileVersion
        {
            get => field_FileVersion;
            set => field_FileVersion = CheckNotFrozen(ref value);
        }

        // ---------- IGeneratorsInfo methods ----------
        String? IGeneratorsInfo.AssmVersion => field_AssmVersion;
        String? IGeneratorsInfo.InfoVersion => field_InfoVersion;
        String? IGeneratorsInfo.FileVersion => field_FileVersion;

        public GeneratorsInfo()
        {
        }

        public GeneratorsInfo(GeneratorsInfo source) : base(source)
        {
            field_AssmVersion = source.field_AssmVersion;
            field_InfoVersion = source.field_InfoVersion;
            field_FileVersion = source.field_FileVersion;
        }

        public void CopyFrom(GeneratorsInfo source)
        {
            base.CopyFrom(source);
            field_AssmVersion = source.field_AssmVersion;
            field_InfoVersion = source.field_InfoVersion;
            field_FileVersion = source.field_FileVersion;
        }

        public GeneratorsInfo(IGeneratorsInfo source) : base(source)
        {
            field_AssmVersion = source.AssmVersion;
            field_InfoVersion = source.InfoVersion;
            field_FileVersion = source.FileVersion;
        }

        public bool Equals(GeneratorsInfo? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_AssmVersion.ValueEquals(other.field_AssmVersion)) return false;
            if (!field_InfoVersion.ValueEquals(other.field_InfoVersion)) return false;
            if (!field_FileVersion.ValueEquals(other.field_FileVersion)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GeneratorsInfo left, GeneratorsInfo right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GeneratorsInfo left, GeneratorsInfo right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GeneratorsInfo other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_AssmVersion.CalcHashUnary());
            hc.Add(field_InfoVersion.CalcHashUnary());
            hc.Add(field_FileVersion.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetServerInfoRequest_Factory : IEntityFactory<IGetServerInfoRequest, GetServerInfoRequest>
    {
        private static readonly GetServerInfoRequest_Factory _instance = new GetServerInfoRequest_Factory();
        public static GetServerInfoRequest_Factory Instance => _instance;

        public GetServerInfoRequest? CreateFrom(IGetServerInfoRequest? source)
        {
            if (source is null) return null;
            if (source is GetServerInfoRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetServerInfoRequest(source);
        }

        private static readonly GetServerInfoRequest _empty = new GetServerInfoRequest().Frozen();
        public GetServerInfoRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetServerInfoRequest : BaseRequest, IGetServerInfoRequest, IEquatable<GetServerInfoRequest>, ICopyFrom<GetServerInfoRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 11;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IGetServerInfoRequest methods ----------

        public GetServerInfoRequest()
        {
        }

        public GetServerInfoRequest(GetServerInfoRequest source) : base(source)
        {
        }

        public void CopyFrom(GetServerInfoRequest source)
        {
            base.CopyFrom(source);
        }

        public GetServerInfoRequest(IGetServerInfoRequest source) : base(source)
        {
        }

        public bool Equals(GetServerInfoRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(GetServerInfoRequest left, GetServerInfoRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetServerInfoRequest left, GetServerInfoRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetServerInfoRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetServerInfoResponse_Factory : IEntityFactory<IGetServerInfoResponse, GetServerInfoResponse>
    {
        private static readonly GetServerInfoResponse_Factory _instance = new GetServerInfoResponse_Factory();
        public static GetServerInfoResponse_Factory Instance => _instance;

        public GetServerInfoResponse? CreateFrom(IGetServerInfoResponse? source)
        {
            if (source is null) return null;
            if (source is GetServerInfoResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetServerInfoResponse(source);
        }

        private static readonly GetServerInfoResponse _empty = new GetServerInfoResponse().Frozen();
        public GetServerInfoResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetServerInfoResponse : BaseResponse, IGetServerInfoResponse, IEquatable<GetServerInfoResponse>, ICopyFrom<GetServerInfoResponse>
    {
        protected override void OnFreeze()
        {
            if (field_ServerProperties is not null)
            {
                foreach (var element in field_ServerProperties)
                {
                    element?.Freeze();
                }
            }
            base.OnFreeze();
        }

        public new const int EntityTag = 12;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableList<NameValuePair?>? field_ServerProperties;

        // ---------- accessors ----------
        [Key(12)]
        public ImmutableList<NameValuePair?>? ServerProperties
        {
            get => field_ServerProperties;
            set => field_ServerProperties = CheckNotFrozen(ref value);
        }

        // ---------- IGetServerInfoResponse methods ----------
        IReadOnlyList<INameValuePair?>? IGetServerInfoResponse.ServerProperties => field_ServerProperties;

        public GetServerInfoResponse()
        {
        }

        public GetServerInfoResponse(GetServerInfoResponse source) : base(source)
        {
            field_ServerProperties = source.field_ServerProperties;
        }

        public void CopyFrom(GetServerInfoResponse source)
        {
            base.CopyFrom(source);
            field_ServerProperties = source.field_ServerProperties;
        }

        public GetServerInfoResponse(IGetServerInfoResponse source) : base(source)
        {
            field_ServerProperties = source.ServerProperties is null
                ? null
                : ImmutableList<NameValuePair?>.Empty.AddRange(source.ServerProperties.Select(x => NameValuePair_Factory.Instance.CreateFrom(x)));
        }

        public bool Equals(GetServerInfoResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_ServerProperties.ArrayEquals(other.field_ServerProperties)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetServerInfoResponse left, GetServerInfoResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetServerInfoResponse left, GetServerInfoResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetServerInfoResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_ServerProperties.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetGeneratorsInfoRequest_Factory : IEntityFactory<IGetGeneratorsInfoRequest, GetGeneratorsInfoRequest>
    {
        private static readonly GetGeneratorsInfoRequest_Factory _instance = new GetGeneratorsInfoRequest_Factory();
        public static GetGeneratorsInfoRequest_Factory Instance => _instance;

        public GetGeneratorsInfoRequest? CreateFrom(IGetGeneratorsInfoRequest? source)
        {
            if (source is null) return null;
            if (source is GetGeneratorsInfoRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetGeneratorsInfoRequest(source);
        }

        private static readonly GetGeneratorsInfoRequest _empty = new GetGeneratorsInfoRequest().Frozen();
        public GetGeneratorsInfoRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetGeneratorsInfoRequest : BaseRequest, IGetGeneratorsInfoRequest, IEquatable<GetGeneratorsInfoRequest>, ICopyFrom<GetGeneratorsInfoRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 13;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IGetGeneratorsInfoRequest methods ----------

        public GetGeneratorsInfoRequest()
        {
        }

        public GetGeneratorsInfoRequest(GetGeneratorsInfoRequest source) : base(source)
        {
        }

        public void CopyFrom(GetGeneratorsInfoRequest source)
        {
            base.CopyFrom(source);
        }

        public GetGeneratorsInfoRequest(IGetGeneratorsInfoRequest source) : base(source)
        {
        }

        public bool Equals(GetGeneratorsInfoRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(GetGeneratorsInfoRequest left, GetGeneratorsInfoRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetGeneratorsInfoRequest left, GetGeneratorsInfoRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetGeneratorsInfoRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetGeneratorsInfoResponse_Factory : IEntityFactory<IGetGeneratorsInfoResponse, GetGeneratorsInfoResponse>
    {
        private static readonly GetGeneratorsInfoResponse_Factory _instance = new GetGeneratorsInfoResponse_Factory();
        public static GetGeneratorsInfoResponse_Factory Instance => _instance;

        public GetGeneratorsInfoResponse? CreateFrom(IGetGeneratorsInfoResponse? source)
        {
            if (source is null) return null;
            if (source is GetGeneratorsInfoResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetGeneratorsInfoResponse(source);
        }

        private static readonly GetGeneratorsInfoResponse _empty = new GetGeneratorsInfoResponse().Frozen();
        public GetGeneratorsInfoResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetGeneratorsInfoResponse : BaseResponse, IGetGeneratorsInfoResponse, IEquatable<GetGeneratorsInfoResponse>, ICopyFrom<GetGeneratorsInfoResponse>
    {
        protected override void OnFreeze()
        {
            field_VersionInfo?.Freeze();
            base.OnFreeze();
        }

        public new const int EntityTag = 14;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private GeneratorsInfo? field_VersionInfo;

        // ---------- accessors ----------
        [Key(11)]
        public GeneratorsInfo? VersionInfo
        {
            get => field_VersionInfo;
            set => field_VersionInfo = CheckNotFrozen(ref value);
        }

        // ---------- IGetGeneratorsInfoResponse methods ----------
        IGeneratorsInfo? IGetGeneratorsInfoResponse.VersionInfo => field_VersionInfo;

        public GetGeneratorsInfoResponse()
        {
        }

        public GetGeneratorsInfoResponse(GetGeneratorsInfoResponse source) : base(source)
        {
            field_VersionInfo = source.field_VersionInfo;
        }

        public void CopyFrom(GetGeneratorsInfoResponse source)
        {
            base.CopyFrom(source);
            field_VersionInfo = source.field_VersionInfo;
        }

        public GetGeneratorsInfoResponse(IGetGeneratorsInfoResponse source) : base(source)
        {
            field_VersionInfo = GeneratorsInfo_Factory.Instance.CreateFrom(source.VersionInfo);
        }

        public bool Equals(GetGeneratorsInfoResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_VersionInfo.ValueEquals(other.field_VersionInfo)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetGeneratorsInfoResponse left, GetGeneratorsInfoResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetGeneratorsInfoResponse left, GetGeneratorsInfoResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetGeneratorsInfoResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_VersionInfo.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetTemplateNamesRequest_Factory : IEntityFactory<IGetTemplateNamesRequest, GetTemplateNamesRequest>
    {
        private static readonly GetTemplateNamesRequest_Factory _instance = new GetTemplateNamesRequest_Factory();
        public static GetTemplateNamesRequest_Factory Instance => _instance;

        public GetTemplateNamesRequest? CreateFrom(IGetTemplateNamesRequest? source)
        {
            if (source is null) return null;
            if (source is GetTemplateNamesRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetTemplateNamesRequest(source);
        }

        private static readonly GetTemplateNamesRequest _empty = new GetTemplateNamesRequest().Frozen();
        public GetTemplateNamesRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetTemplateNamesRequest : BaseRequest, IGetTemplateNamesRequest, IEquatable<GetTemplateNamesRequest>, ICopyFrom<GetTemplateNamesRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 15;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------

        // ---------- accessors ----------

        // ---------- IGetTemplateNamesRequest methods ----------

        public GetTemplateNamesRequest()
        {
        }

        public GetTemplateNamesRequest(GetTemplateNamesRequest source) : base(source)
        {
        }

        public void CopyFrom(GetTemplateNamesRequest source)
        {
            base.CopyFrom(source);
        }

        public GetTemplateNamesRequest(IGetTemplateNamesRequest source) : base(source)
        {
        }

        public bool Equals(GetTemplateNamesRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }

        public static bool operator ==(GetTemplateNamesRequest left, GetTemplateNamesRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetTemplateNamesRequest left, GetTemplateNamesRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetTemplateNamesRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetTemplateNamesResponse_Factory : IEntityFactory<IGetTemplateNamesResponse, GetTemplateNamesResponse>
    {
        private static readonly GetTemplateNamesResponse_Factory _instance = new GetTemplateNamesResponse_Factory();
        public static GetTemplateNamesResponse_Factory Instance => _instance;

        public GetTemplateNamesResponse? CreateFrom(IGetTemplateNamesResponse? source)
        {
            if (source is null) return null;
            if (source is GetTemplateNamesResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetTemplateNamesResponse(source);
        }

        private static readonly GetTemplateNamesResponse _empty = new GetTemplateNamesResponse().Frozen();
        public GetTemplateNamesResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetTemplateNamesResponse : BaseResponse, IGetTemplateNamesResponse, IEquatable<GetTemplateNamesResponse>, ICopyFrom<GetTemplateNamesResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 16;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableList<String?>? field_TemplateNames;

        // ---------- accessors ----------
        [Key(11)]
        public ImmutableList<String?>? TemplateNames
        {
            get => field_TemplateNames;
            set => field_TemplateNames = CheckNotFrozen(ref value);
        }

        // ---------- IGetTemplateNamesResponse methods ----------
        IReadOnlyList<String?>? IGetTemplateNamesResponse.TemplateNames => field_TemplateNames;

        public GetTemplateNamesResponse()
        {
        }

        public GetTemplateNamesResponse(GetTemplateNamesResponse source) : base(source)
        {
            field_TemplateNames = source.field_TemplateNames;
        }

        public void CopyFrom(GetTemplateNamesResponse source)
        {
            base.CopyFrom(source);
            field_TemplateNames = source.field_TemplateNames;
        }

        public GetTemplateNamesResponse(IGetTemplateNamesResponse source) : base(source)
        {
            field_TemplateNames = source.TemplateNames is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.TemplateNames);
        }

        public bool Equals(GetTemplateNamesResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_TemplateNames.ArrayEquals(other.field_TemplateNames)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetTemplateNamesResponse left, GetTemplateNamesResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetTemplateNamesResponse left, GetTemplateNamesResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetTemplateNamesResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_TemplateNames.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetTemplateRequest_Factory : IEntityFactory<IGetTemplateRequest, GetTemplateRequest>
    {
        private static readonly GetTemplateRequest_Factory _instance = new GetTemplateRequest_Factory();
        public static GetTemplateRequest_Factory Instance => _instance;

        public GetTemplateRequest? CreateFrom(IGetTemplateRequest? source)
        {
            if (source is null) return null;
            if (source is GetTemplateRequest sibling && sibling.IsFrozen()) return sibling;
            return new GetTemplateRequest(source);
        }

        private static readonly GetTemplateRequest _empty = new GetTemplateRequest().Frozen();
        public GetTemplateRequest Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetTemplateRequest : BaseRequest, IGetTemplateRequest, IEquatable<GetTemplateRequest>, ICopyFrom<GetTemplateRequest>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 17;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private String? field_TemplateName;

        // ---------- accessors ----------
        [Key(11)]
        public String? TemplateName
        {
            get => field_TemplateName;
            set => field_TemplateName = CheckNotFrozen(ref value);
        }

        // ---------- IGetTemplateRequest methods ----------
        String? IGetTemplateRequest.TemplateName => field_TemplateName;

        public GetTemplateRequest()
        {
        }

        public GetTemplateRequest(GetTemplateRequest source) : base(source)
        {
            field_TemplateName = source.field_TemplateName;
        }

        public void CopyFrom(GetTemplateRequest source)
        {
            base.CopyFrom(source);
            field_TemplateName = source.field_TemplateName;
        }

        public GetTemplateRequest(IGetTemplateRequest source) : base(source)
        {
            field_TemplateName = source.TemplateName;
        }

        public bool Equals(GetTemplateRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_TemplateName.ValueEquals(other.field_TemplateName)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetTemplateRequest left, GetTemplateRequest right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetTemplateRequest left, GetTemplateRequest right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetTemplateRequest other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_TemplateName.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public sealed class GetTemplateResponse_Factory : IEntityFactory<IGetTemplateResponse, GetTemplateResponse>
    {
        private static readonly GetTemplateResponse_Factory _instance = new GetTemplateResponse_Factory();
        public static GetTemplateResponse_Factory Instance => _instance;

        public GetTemplateResponse? CreateFrom(IGetTemplateResponse? source)
        {
            if (source is null) return null;
            if (source is GetTemplateResponse sibling && sibling.IsFrozen()) return sibling;
            return new GetTemplateResponse(source);
        }

        private static readonly GetTemplateResponse _empty = new GetTemplateResponse().Frozen();
        public GetTemplateResponse Empty => _empty;
    }
    [MessagePackObject]
    public partial class GetTemplateResponse : BaseResponse, IGetTemplateResponse, IEquatable<GetTemplateResponse>, ICopyFrom<GetTemplateResponse>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 18;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableList<String?>? field_Template;

        // ---------- accessors ----------
        [Key(11)]
        public ImmutableList<String?>? Template
        {
            get => field_Template;
            set => field_Template = CheckNotFrozen(ref value);
        }

        // ---------- IGetTemplateResponse methods ----------
        IReadOnlyList<String?>? IGetTemplateResponse.Template => field_Template;

        public GetTemplateResponse()
        {
        }

        public GetTemplateResponse(GetTemplateResponse source) : base(source)
        {
            field_Template = source.field_Template;
        }

        public void CopyFrom(GetTemplateResponse source)
        {
            base.CopyFrom(source);
            field_Template = source.field_Template;
        }

        public GetTemplateResponse(IGetTemplateResponse source) : base(source)
        {
            field_Template = source.Template is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.Template);
        }

        public bool Equals(GetTemplateResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Template.ArrayEquals(other.field_Template)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(GetTemplateResponse left, GetTemplateResponse right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(GetTemplateResponse left, GetTemplateResponse right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is GetTemplateResponse other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Template.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }


}
